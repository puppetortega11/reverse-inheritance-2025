"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __knownSymbol = (name, symbol) => (symbol = Symbol[name]) ? symbol : Symbol.for("Symbol." + name);
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __await = function(promise, isYieldStar) {
  this[0] = promise;
  this[1] = isYieldStar;
};
var __asyncGenerator = (__this, __arguments, generator) => {
  var resume = (k, v, yes, no) => {
    try {
      var x = generator[k](v), isAwait = (v = x.value) instanceof __await, done = x.done;
      Promise.resolve(isAwait ? v[0] : v).then((y) => isAwait ? resume(k === "return" ? k : "next", v[1] ? { done: y.done, value: y.value } : y, yes, no) : yes({ value: y, done })).catch((e) => resume("throw", e, yes, no));
    } catch (e) {
      no(e);
    }
  }, method = (k) => it[k] = (x) => new Promise((yes, no) => resume(k, x, yes, no)), it = {};
  return generator = generator.apply(__this, __arguments), it[__knownSymbol("asyncIterator")] = () => it, method("next"), method("throw"), method("return"), it;
};
var __forAwait = (obj, it, method) => (it = obj[__knownSymbol("asyncIterator")]) ? it.call(obj) : (obj = obj[__knownSymbol("iterator")](), it = {}, method = (key, fn) => (fn = obj[key]) && (it[key] = (arg) => new Promise((yes, no, done) => (arg = fn.call(obj, arg), done = arg.done, Promise.resolve(arg.value).then((value) => yes({ value, done }), no)))), method("next"), method("return"), it);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  ApiClient: () => ApiClient,
  AuthenticationError: () => AuthenticationError,
  BuildError: () => BuildError,
  CommandExitError: () => CommandExitError,
  ConnectionConfig: () => ConnectionConfig,
  FileType: () => FileType2,
  FileUploadError: () => FileUploadError,
  FilesystemEventType: () => FilesystemEventType,
  InvalidArgumentError: () => InvalidArgumentError,
  NotEnoughSpaceError: () => NotEnoughSpaceError,
  NotFoundError: () => NotFoundError,
  RateLimitError: () => RateLimitError,
  Sandbox: () => Sandbox,
  SandboxError: () => SandboxError,
  Template: () => Template,
  TemplateError: () => TemplateError,
  TimeoutError: () => TimeoutError,
  default: () => src_default,
  getSignature: () => getSignature,
  waitForFile: () => waitForFile,
  waitForPort: () => waitForPort,
  waitForProcess: () => waitForProcess,
  waitForTimeout: () => waitForTimeout,
  waitForURL: () => waitForURL
});
module.exports = __toCommonJS(src_exports);

// src/api/index.ts
var import_openapi_fetch = __toESM(require("openapi-fetch"));

// src/api/metadata.ts
var import_platform2 = __toESM(require("platform"));

// package.json
var version = "2.1.5";

// src/utils.ts
var import_platform = __toESM(require("platform"));
function getRuntime() {
  var _a3, _b, _c;
  if (globalThis.Bun) {
    return { runtime: "bun", version: globalThis.Bun.version };
  }
  if (globalThis.Deno) {
    return { runtime: "deno", version: globalThis.Deno.version.deno };
  }
  if (((_b = (_a3 = globalThis.process) == null ? void 0 : _a3.release) == null ? void 0 : _b.name) === "node") {
    return { runtime: "node", version: import_platform.default.version || "unknown" };
  }
  if (typeof EdgeRuntime === "string") {
    return { runtime: "vercel-edge", version: "unknown" };
  }
  if (((_c = globalThis.navigator) == null ? void 0 : _c.userAgent) === "Cloudflare-Workers") {
    return { runtime: "cloudflare-worker", version: "unknown" };
  }
  if (typeof window !== "undefined") {
    return { runtime: "browser", version: import_platform.default.version || "unknown" };
  }
  return { runtime: "unknown", version: "unknown" };
}
var { runtime, version: runtimeVersion } = getRuntime();
async function sha256(data) {
  if (typeof crypto !== "undefined") {
    const encoder = new TextEncoder();
    const dataBuffer = encoder.encode(data);
    const hashBuffer = await crypto.subtle.digest("SHA-256", dataBuffer);
    const hashArray = new Uint8Array(hashBuffer);
    return btoa(String.fromCharCode(...hashArray));
  }
  const { createHash } = require("crypto");
  const hash = createHash("sha256").update(data, "utf8").digest();
  return hash.toString("base64");
}
function timeoutToSeconds(timeout) {
  return Math.ceil(timeout / 1e3);
}
async function dynamicGlob() {
  if (runtime === "browser") {
    throw new Error("Browser runtime is not supported for glob");
  }
  return await import("glob");
}
async function dynamicTar() {
  if (runtime === "browser") {
    throw new Error("Browser runtime is not supported for tar");
  }
  return await import("tar");
}
function ansiRegex({ onlyFirst = false } = {}) {
  const ST = "(?:\\u0007|\\u001B\\u005C|\\u009C)";
  const osc = `(?:\\u001B\\][\\s\\S]*?${ST})`;
  const csi = "[\\u001B\\u009B][[\\]()#;?]*(?:\\d{1,4}(?:[;:]\\d{0,4})*)?[\\dA-PR-TZcf-nq-uy=><~]";
  const pattern = `${osc}|${csi}`;
  return new RegExp(pattern, onlyFirst ? void 0 : "g");
}
function stripAnsi(text) {
  return text.replace(ansiRegex(), "");
}

// src/api/metadata.ts
var _a;
var defaultHeaders = {
  browser: typeof window !== "undefined" && import_platform2.default.name || "unknown",
  lang: "js",
  lang_version: runtimeVersion,
  package_version: version,
  publisher: "e2b",
  sdk_runtime: runtime,
  system: ((_a = import_platform2.default.os) == null ? void 0 : _a.family) || "unknown"
};
function getEnvVar(name) {
  if (runtime === "deno") {
    return Deno.env.get(name);
  }
  if (typeof process === "undefined") {
    return "";
  }
  return process.env[name];
}

// src/errors.ts
function formatSandboxTimeoutError(message) {
  return new TimeoutError(
    `${message}: This error is likely due to sandbox timeout. You can modify the sandbox timeout by passing 'timeoutMs' when starting the sandbox or calling '.setTimeout' on the sandbox with the desired timeout.`
  );
}
var SandboxError = class extends Error {
  constructor(message, stackTrace) {
    super(message);
    this.name = "SandboxError";
    if (stackTrace) {
      this.stack = stackTrace;
    }
  }
};
var TimeoutError = class extends SandboxError {
  constructor(message, stackTrace) {
    super(message, stackTrace);
    this.name = "TimeoutError";
  }
};
var InvalidArgumentError = class extends SandboxError {
  constructor(message, stackTrace) {
    super(message, stackTrace);
    this.name = "InvalidArgumentError";
  }
};
var NotEnoughSpaceError = class extends SandboxError {
  constructor(message, stackTrace) {
    super(message, stackTrace);
    this.name = "NotEnoughSpaceError";
  }
};
var NotFoundError = class extends SandboxError {
  constructor(message, stackTrace) {
    super(message, stackTrace);
    this.name = "NotFoundError";
  }
};
var AuthenticationError = class extends Error {
  constructor(message) {
    super(message);
    this.name = "AuthenticationError";
  }
};
var TemplateError = class extends SandboxError {
  constructor(message, stackTrace) {
    super(message, stackTrace);
    this.name = "TemplateError";
  }
};
var RateLimitError = class extends SandboxError {
  constructor(message) {
    super(message);
    this.name = "RateLimitError";
  }
};

// src/logs.ts
function formatLog(log) {
  return JSON.parse(JSON.stringify(log));
}
function createRpcLogger(logger) {
  function logEach(stream) {
    return __asyncGenerator(this, null, function* () {
      var _a3;
      try {
        for (var iter = __forAwait(stream), more, temp, error; more = !(temp = yield new __await(iter.next())).done; more = false) {
          const m = temp.value;
          (_a3 = logger.debug) == null ? void 0 : _a3.call(logger, "Response stream:", formatLog(m));
          yield m;
        }
      } catch (temp) {
        error = [temp];
      } finally {
        try {
          more && (temp = iter.return) && (yield new __await(temp.call(iter)));
        } finally {
          if (error)
            throw error[0];
        }
      }
    });
  }
  return (next) => async (req) => {
    var _a3, _b;
    (_a3 = logger.info) == null ? void 0 : _a3.call(logger, `Request: POST ${req.url}`);
    const res = await next(req);
    if (res.stream) {
      return __spreadProps(__spreadValues({}, res), {
        message: logEach(res.message)
      });
    } else {
      (_b = logger.info) == null ? void 0 : _b.call(logger, "Response:", formatLog(res.message));
    }
    return res;
  };
}
function createApiLogger(logger) {
  return {
    async onRequest(req) {
      var _a3;
      (_a3 = logger.info) == null ? void 0 : _a3.call(logger, `Request ${req.method} ${req.url}`);
      return req;
    },
    async onResponse(res) {
      var _a3, _b;
      if (res.status >= 400) {
        (_a3 = logger.error) == null ? void 0 : _a3.call(logger, "Response:", res.status, res.statusText);
      } else {
        (_b = logger.info) == null ? void 0 : _b.call(logger, "Response:", res.status, res.statusText);
      }
      return res;
    }
  };
}

// src/api/index.ts
function handleApiError(response, errorClass = SandboxError, stackTrace) {
  var _a3, _b, _c, _d, _e, _f;
  if (!response.error) {
    return;
  }
  if (response.response.status === 401) {
    const message2 = "Unauthorized, please check your credentials.";
    const content = (_b = (_a3 = response.error) == null ? void 0 : _a3.message) != null ? _b : response.error;
    if (content) {
      return new AuthenticationError(`${message2} - ${content}`);
    }
    return new AuthenticationError(message2);
  }
  if (response.response.status === 429) {
    const message2 = "Rate limit exceeded, please try again later";
    const content = (_d = (_c = response.error) == null ? void 0 : _c.message) != null ? _d : response.error;
    if (content) {
      return new RateLimitError(`${message2} - ${content}`);
    }
    return new RateLimitError(message2);
  }
  const message = (_f = (_e = response.error) == null ? void 0 : _e.message) != null ? _f : response.error;
  return new errorClass(`${response.response.status}: ${message}`, stackTrace);
}
var ApiClient = class {
  constructor(config, opts = { requireAccessToken: false, requireApiKey: false }) {
    if ((opts == null ? void 0 : opts.requireApiKey) && !config.apiKey) {
      throw new AuthenticationError(
        "API key is required, please visit the Team tab at https://e2b.dev/dashboard to get your API key. You can either set the environment variable `E2B_API_KEY` or you can pass it directly to the sandbox like Sandbox.create({ apiKey: 'e2b_...' })"
      );
    }
    if ((opts == null ? void 0 : opts.requireAccessToken) && !config.accessToken) {
      throw new AuthenticationError(
        "Access token is required, please visit the Personal tab at https://e2b.dev/dashboard to get your access token. You can set the environment variable `E2B_ACCESS_TOKEN` or pass the `accessToken` in options."
      );
    }
    this.api = (0, import_openapi_fetch.default)({
      baseUrl: config.apiUrl,
      // keepalive: true, // TODO: Return keepalive
      headers: __spreadValues(__spreadValues(__spreadValues(__spreadValues({}, defaultHeaders), config.apiKey && { "X-API-KEY": config.apiKey }), config.accessToken && {
        Authorization: `Bearer ${config.accessToken}`
      }), config.headers),
      querySerializer: {
        array: {
          style: "form",
          explode: false
        }
      }
    });
    if (config.logger) {
      this.api.use(createApiLogger(config.logger));
    }
  }
};

// src/connectionConfig.ts
var REQUEST_TIMEOUT_MS = 6e4;
var DEFAULT_SANDBOX_TIMEOUT_MS = 3e5;
var KEEPALIVE_PING_INTERVAL_SEC = 50;
var KEEPALIVE_PING_HEADER = "Keepalive-Ping-Interval";
var ConnectionConfig = class _ConnectionConfig {
  constructor(opts) {
    var _a3;
    this.apiKey = (opts == null ? void 0 : opts.apiKey) || _ConnectionConfig.apiKey;
    this.debug = (opts == null ? void 0 : opts.debug) || _ConnectionConfig.debug;
    this.domain = (opts == null ? void 0 : opts.domain) || _ConnectionConfig.domain;
    this.accessToken = (opts == null ? void 0 : opts.accessToken) || _ConnectionConfig.accessToken;
    this.requestTimeoutMs = (_a3 = opts == null ? void 0 : opts.requestTimeoutMs) != null ? _a3 : REQUEST_TIMEOUT_MS;
    this.logger = opts == null ? void 0 : opts.logger;
    this.headers = (opts == null ? void 0 : opts.headers) || {};
    this.headers["User-Agent"] = `e2b-js-sdk/${version}`;
    this.apiUrl = this.debug ? "http://localhost:3000" : `https://api.${this.domain}`;
  }
  static get domain() {
    return getEnvVar("E2B_DOMAIN") || "e2b.app";
  }
  static get debug() {
    return (getEnvVar("E2B_DEBUG") || "false").toLowerCase() === "true";
  }
  static get apiKey() {
    return getEnvVar("E2B_API_KEY");
  }
  static get accessToken() {
    return getEnvVar("E2B_ACCESS_TOKEN");
  }
  getSignal(requestTimeoutMs) {
    const timeout = requestTimeoutMs != null ? requestTimeoutMs : this.requestTimeoutMs;
    return timeout ? AbortSignal.timeout(timeout) : void 0;
  }
};
var defaultUsername = "user";

// src/sandbox/signature.ts
async function getSignature({
  path: path2,
  operation,
  user,
  expirationInSeconds,
  envdAccessToken
}) {
  if (!envdAccessToken) {
    throw new Error(
      "Access token is not set and signature cannot be generated!"
    );
  }
  const signatureExpiration = expirationInSeconds ? Math.floor(Date.now() / 1e3) + expirationInSeconds : null;
  let signatureRaw;
  if (signatureExpiration === null) {
    signatureRaw = `${path2}:${operation}:${user}:${envdAccessToken}`;
  } else {
    signatureRaw = `${path2}:${operation}:${user}:${envdAccessToken}:${signatureExpiration.toString()}`;
  }
  const hashBase64 = await sha256(signatureRaw);
  const signature = "v1_" + hashBase64.replace(/=+$/, "");
  return {
    signature,
    expiration: signatureExpiration
  };
}

// src/sandbox/filesystem/index.ts
var import_connect3 = require("@connectrpc/connect");

// src/envd/api.ts
var import_openapi_fetch2 = __toESM(require("openapi-fetch"));
var import_connect = require("@connectrpc/connect");
async function handleEnvdApiError(res) {
  var _a3;
  if (!res.error) {
    return;
  }
  const message = typeof res.error == "string" ? res.error : ((_a3 = res.error) == null ? void 0 : _a3.message) || await res.response.text();
  switch (res.response.status) {
    case 400:
      return new InvalidArgumentError(message);
    case 401:
      return new AuthenticationError(message);
    case 404:
      return new NotFoundError(message);
    case 429:
      return new SandboxError(
        `${res.response.status}: ${message}: The requests are being rate limited.`
      );
    case 502:
      return formatSandboxTimeoutError(message);
    case 507:
      return new NotEnoughSpaceError(message);
    default:
      return new SandboxError(`${res.response.status}: ${message}`);
  }
}
async function handleProcessStartEvent(events) {
  var _a3;
  let startEvent;
  try {
    startEvent = (await events[Symbol.asyncIterator]().next()).value;
  } catch (err) {
    if (err instanceof import_connect.ConnectError) {
      if (err.code === import_connect.Code.Unavailable) {
        throw new NotFoundError("Sandbox is probably not running anymore");
      }
    }
    throw err;
  }
  if (((_a3 = startEvent.event) == null ? void 0 : _a3.event.case) !== "start") {
    throw new Error("Expected start event");
  }
  return startEvent.event.event.value.pid;
}
async function handleWatchDirStartEvent(events) {
  var _a3;
  let startEvent;
  try {
    startEvent = (await events[Symbol.asyncIterator]().next()).value;
  } catch (err) {
    if (err instanceof import_connect.ConnectError) {
      if (err.code === import_connect.Code.Unavailable) {
        throw new NotFoundError("Sandbox is probably not running anymore");
      }
    }
    throw err;
  }
  if (((_a3 = startEvent.event) == null ? void 0 : _a3.case) !== "start") {
    throw new Error("Expected start event");
  }
  return startEvent.event.value;
}
var EnvdApiClient = class {
  constructor(config, metadata) {
    this.api = (0, import_openapi_fetch2.default)({
      baseUrl: config.apiUrl,
      fetch: config == null ? void 0 : config.fetch,
      headers: config == null ? void 0 : config.headers
      // keepalive: true, // TODO: Return keepalive
    });
    this.version = metadata.version;
    if (config.logger) {
      this.api.use(createApiLogger(config.logger));
    }
  }
};

// src/envd/rpc.ts
var import_connect2 = require("@connectrpc/connect");
function handleRpcError(err) {
  if (err instanceof import_connect2.ConnectError) {
    switch (err.code) {
      case import_connect2.Code.InvalidArgument:
        return new InvalidArgumentError(err.message);
      case import_connect2.Code.Unauthenticated:
        return new AuthenticationError(err.message);
      case import_connect2.Code.NotFound:
        return new NotFoundError(err.message);
      case import_connect2.Code.Unavailable:
        return formatSandboxTimeoutError(err.message);
      case import_connect2.Code.Canceled:
        return new TimeoutError(
          `${err.message}: This error is likely due to exceeding 'requestTimeoutMs'. You can pass the request timeout value as an option when making the request.`
        );
      case import_connect2.Code.DeadlineExceeded:
        return new TimeoutError(
          `${err.message}: This error is likely due to exceeding 'timeoutMs' \u2014 the total time a long running request (like command execution or directory watch) can be active. It can be modified by passing 'timeoutMs' when making the request. Use '0' to disable the timeout.`
        );
      default:
        return new SandboxError(`${err.code}: ${err.message}`);
    }
  }
  return err;
}
function encode64(value) {
  switch (runtime) {
    case "deno":
      return btoa(value);
    case "node":
      return Buffer.from(value).toString("base64");
    case "bun":
      return Buffer.from(value).toString("base64");
    default:
      return btoa(value);
  }
}
function authenticationHeader(username) {
  const value = `${username || defaultUsername}:`;
  const encoded = encode64(value);
  return { Authorization: `Basic ${encoded}` };
}

// src/envd/filesystem/filesystem_pb.ts
var import_codegenv2 = require("@bufbuild/protobuf/codegenv2");
var import_wkt = require("@bufbuild/protobuf/wkt");
var file_filesystem_filesystem = /* @__PURE__ */ (0, import_codegenv2.fileDesc)(
  "ChtmaWxlc3lzdGVtL2ZpbGVzeXN0ZW0ucHJvdG8SCmZpbGVzeXN0ZW0iMgoLTW92ZVJlcXVlc3QSDgoGc291cmNlGAEgASgJEhMKC2Rlc3RpbmF0aW9uGAIgASgJIjQKDE1vdmVSZXNwb25zZRIkCgVlbnRyeRgBIAEoCzIVLmZpbGVzeXN0ZW0uRW50cnlJbmZvIh4KDk1ha2VEaXJSZXF1ZXN0EgwKBHBhdGgYASABKAkiNwoPTWFrZURpclJlc3BvbnNlEiQKBWVudHJ5GAEgASgLMhUuZmlsZXN5c3RlbS5FbnRyeUluZm8iHQoNUmVtb3ZlUmVxdWVzdBIMCgRwYXRoGAEgASgJIhAKDlJlbW92ZVJlc3BvbnNlIhsKC1N0YXRSZXF1ZXN0EgwKBHBhdGgYASABKAkiNAoMU3RhdFJlc3BvbnNlEiQKBWVudHJ5GAEgASgLMhUuZmlsZXN5c3RlbS5FbnRyeUluZm8i/QEKCUVudHJ5SW5mbxIMCgRuYW1lGAEgASgJEiIKBHR5cGUYAiABKA4yFC5maWxlc3lzdGVtLkZpbGVUeXBlEgwKBHBhdGgYAyABKAkSDAoEc2l6ZRgEIAEoAxIMCgRtb2RlGAUgASgNEhMKC3Blcm1pc3Npb25zGAYgASgJEg0KBW93bmVyGAcgASgJEg0KBWdyb3VwGAggASgJEjEKDW1vZGlmaWVkX3RpbWUYCSABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEhsKDnN5bWxpbmtfdGFyZ2V0GAogASgJSACIAQFCEQoPX3N5bWxpbmtfdGFyZ2V0Ii0KDkxpc3REaXJSZXF1ZXN0EgwKBHBhdGgYASABKAkSDQoFZGVwdGgYAiABKA0iOQoPTGlzdERpclJlc3BvbnNlEiYKB2VudHJpZXMYASADKAsyFS5maWxlc3lzdGVtLkVudHJ5SW5mbyIyCg9XYXRjaERpclJlcXVlc3QSDAoEcGF0aBgBIAEoCRIRCglyZWN1cnNpdmUYAiABKAgiRAoPRmlsZXN5c3RlbUV2ZW50EgwKBG5hbWUYASABKAkSIwoEdHlwZRgCIAEoDjIVLmZpbGVzeXN0ZW0uRXZlbnRUeXBlIuABChBXYXRjaERpclJlc3BvbnNlEjgKBXN0YXJ0GAEgASgLMicuZmlsZXN5c3RlbS5XYXRjaERpclJlc3BvbnNlLlN0YXJ0RXZlbnRIABIxCgpmaWxlc3lzdGVtGAIgASgLMhsuZmlsZXN5c3RlbS5GaWxlc3lzdGVtRXZlbnRIABI7CglrZWVwYWxpdmUYAyABKAsyJi5maWxlc3lzdGVtLldhdGNoRGlyUmVzcG9uc2UuS2VlcEFsaXZlSAAaDAoKU3RhcnRFdmVudBoLCglLZWVwQWxpdmVCBwoFZXZlbnQiNwoUQ3JlYXRlV2F0Y2hlclJlcXVlc3QSDAoEcGF0aBgBIAEoCRIRCglyZWN1cnNpdmUYAiABKAgiKwoVQ3JlYXRlV2F0Y2hlclJlc3BvbnNlEhIKCndhdGNoZXJfaWQYASABKAkiLQoXR2V0V2F0Y2hlckV2ZW50c1JlcXVlc3QSEgoKd2F0Y2hlcl9pZBgBIAEoCSJHChhHZXRXYXRjaGVyRXZlbnRzUmVzcG9uc2USKwoGZXZlbnRzGAEgAygLMhsuZmlsZXN5c3RlbS5GaWxlc3lzdGVtRXZlbnQiKgoUUmVtb3ZlV2F0Y2hlclJlcXVlc3QSEgoKd2F0Y2hlcl9pZBgBIAEoCSIXChVSZW1vdmVXYXRjaGVyUmVzcG9uc2UqUgoIRmlsZVR5cGUSGQoVRklMRV9UWVBFX1VOU1BFQ0lGSUVEEAASEgoORklMRV9UWVBFX0ZJTEUQARIXChNGSUxFX1RZUEVfRElSRUNUT1JZEAIqmAEKCUV2ZW50VHlwZRIaChZFVkVOVF9UWVBFX1VOU1BFQ0lGSUVEEAASFQoRRVZFTlRfVFlQRV9DUkVBVEUQARIUChBFVkVOVF9UWVBFX1dSSVRFEAISFQoRRVZFTlRfVFlQRV9SRU1PVkUQAxIVChFFVkVOVF9UWVBFX1JFTkFNRRAEEhQKEEVWRU5UX1RZUEVfQ0hNT0QQBTKfBQoKRmlsZXN5c3RlbRI5CgRTdGF0EhcuZmlsZXN5c3RlbS5TdGF0UmVxdWVzdBoYLmZpbGVzeXN0ZW0uU3RhdFJlc3BvbnNlEkIKB01ha2VEaXISGi5maWxlc3lzdGVtLk1ha2VEaXJSZXF1ZXN0GhsuZmlsZXN5c3RlbS5NYWtlRGlyUmVzcG9uc2USOQoETW92ZRIXLmZpbGVzeXN0ZW0uTW92ZVJlcXVlc3QaGC5maWxlc3lzdGVtLk1vdmVSZXNwb25zZRJCCgdMaXN0RGlyEhouZmlsZXN5c3RlbS5MaXN0RGlyUmVxdWVzdBobLmZpbGVzeXN0ZW0uTGlzdERpclJlc3BvbnNlEj8KBlJlbW92ZRIZLmZpbGVzeXN0ZW0uUmVtb3ZlUmVxdWVzdBoaLmZpbGVzeXN0ZW0uUmVtb3ZlUmVzcG9uc2USRwoIV2F0Y2hEaXISGy5maWxlc3lzdGVtLldhdGNoRGlyUmVxdWVzdBocLmZpbGVzeXN0ZW0uV2F0Y2hEaXJSZXNwb25zZTABElQKDUNyZWF0ZVdhdGNoZXISIC5maWxlc3lzdGVtLkNyZWF0ZVdhdGNoZXJSZXF1ZXN0GiEuZmlsZXN5c3RlbS5DcmVhdGVXYXRjaGVyUmVzcG9uc2USXQoQR2V0V2F0Y2hlckV2ZW50cxIjLmZpbGVzeXN0ZW0uR2V0V2F0Y2hlckV2ZW50c1JlcXVlc3QaJC5maWxlc3lzdGVtLkdldFdhdGNoZXJFdmVudHNSZXNwb25zZRJUCg1SZW1vdmVXYXRjaGVyEiAuZmlsZXN5c3RlbS5SZW1vdmVXYXRjaGVyUmVxdWVzdBohLmZpbGVzeXN0ZW0uUmVtb3ZlV2F0Y2hlclJlc3BvbnNlQmkKDmNvbS5maWxlc3lzdGVtQg9GaWxlc3lzdGVtUHJvdG9QAaICA0ZYWKoCCkZpbGVzeXN0ZW3KAgpGaWxlc3lzdGVt4gIWRmlsZXN5c3RlbVxHUEJNZXRhZGF0YeoCCkZpbGVzeXN0ZW1iBnByb3RvMw",
  [import_wkt.file_google_protobuf_timestamp]
);
var Filesystem = /* @__PURE__ */ (0, import_codegenv2.serviceDesc)(file_filesystem_filesystem, 0);

// src/sandbox/filesystem/watchHandle.ts
var FilesystemEventType = /* @__PURE__ */ ((FilesystemEventType2) => {
  FilesystemEventType2["CHMOD"] = "chmod";
  FilesystemEventType2["CREATE"] = "create";
  FilesystemEventType2["REMOVE"] = "remove";
  FilesystemEventType2["RENAME"] = "rename";
  FilesystemEventType2["WRITE"] = "write";
  return FilesystemEventType2;
})(FilesystemEventType || {});
function mapEventType(type) {
  switch (type) {
    case 5 /* CHMOD */:
      return "chmod" /* CHMOD */;
    case 1 /* CREATE */:
      return "create" /* CREATE */;
    case 3 /* REMOVE */:
      return "remove" /* REMOVE */;
    case 4 /* RENAME */:
      return "rename" /* RENAME */;
    case 2 /* WRITE */:
      return "write" /* WRITE */;
  }
}
var WatchHandle = class {
  constructor(handleStop, events, onEvent, onExit) {
    this.handleStop = handleStop;
    this.events = events;
    this.onEvent = onEvent;
    this.onExit = onExit;
    this.handleEvents();
  }
  /**
   * Stop watching the directory.
   */
  async stop() {
    this.handleStop();
  }
  iterateEvents() {
    return __asyncGenerator(this, null, function* () {
      try {
        try {
          for (var iter = __forAwait(this.events), more, temp, error; more = !(temp = yield new __await(iter.next())).done; more = false) {
            const event = temp.value;
            switch (event.event.case) {
              case "filesystem":
                yield event.event;
                break;
            }
          }
        } catch (temp) {
          error = [temp];
        } finally {
          try {
            more && (temp = iter.return) && (yield new __await(temp.call(iter)));
          } finally {
            if (error)
              throw error[0];
          }
        }
      } catch (err) {
        throw handleRpcError(err);
      }
    });
  }
  async handleEvents() {
    var _a3, _b, _c;
    try {
      try {
        for (var iter = __forAwait(this.iterateEvents()), more, temp, error; more = !(temp = await iter.next()).done; more = false) {
          const event = temp.value;
          const eventType = mapEventType(event.value.type);
          if (eventType === void 0) {
            continue;
          }
          (_a3 = this.onEvent) == null ? void 0 : _a3.call(this, {
            name: event.value.name,
            type: eventType
          });
        }
      } catch (temp) {
        error = [temp];
      } finally {
        try {
          more && (temp = iter.return) && await temp.call(iter);
        } finally {
          if (error)
            throw error[0];
        }
      }
      (_b = this.onExit) == null ? void 0 : _b.call(this);
    } catch (err) {
      (_c = this.onExit) == null ? void 0 : _c.call(this, err);
    }
  }
};

// src/sandbox/filesystem/index.ts
var import_compare_versions = require("compare-versions");

// src/envd/versions.ts
var ENVD_VERSION_RECURSIVE_WATCH = "0.1.4";

// src/sandbox/filesystem/index.ts
var FileType2 = /* @__PURE__ */ ((FileType3) => {
  FileType3["FILE"] = "file";
  FileType3["DIR"] = "dir";
  return FileType3;
})(FileType2 || {});
function mapFileType(fileType) {
  switch (fileType) {
    case 2 /* DIRECTORY */:
      return "dir" /* DIR */;
    case 1 /* FILE */:
      return "file" /* FILE */;
  }
}
function mapModifiedTime(modifiedTime) {
  if (!modifiedTime) return void 0;
  return new Date(
    Number(modifiedTime.seconds) * 1e3 + Math.floor(modifiedTime.nanos / 1e6)
  );
}
var Filesystem2 = class {
  constructor(transport, envdApi, connectionConfig) {
    this.envdApi = envdApi;
    this.connectionConfig = connectionConfig;
    this.defaultWatchTimeout = 6e4;
    // 60 seconds
    this.defaultWatchRecursive = false;
    this.rpc = (0, import_connect3.createClient)(Filesystem, transport);
  }
  async read(path2, opts) {
    var _a3;
    const format = (_a3 = opts == null ? void 0 : opts.format) != null ? _a3 : "text";
    const res = await this.envdApi.api.GET("/files", {
      params: {
        query: {
          path: path2,
          username: (opts == null ? void 0 : opts.user) || defaultUsername
        }
      },
      parseAs: format === "bytes" ? "arrayBuffer" : format,
      signal: this.connectionConfig.getSignal(opts == null ? void 0 : opts.requestTimeoutMs)
    });
    const err = await handleEnvdApiError(res);
    if (err) {
      throw err;
    }
    if (format === "bytes") {
      return new Uint8Array(res.data);
    }
    if (res.response.headers.get("content-length") === "0") {
      return "";
    }
    return res.data;
  }
  async write(pathOrFiles, dataOrOpts, opts) {
    if (typeof pathOrFiles !== "string" && !Array.isArray(pathOrFiles)) {
      throw new Error("Path or files are required");
    }
    if (typeof pathOrFiles === "string" && Array.isArray(dataOrOpts)) {
      throw new Error(
        "Cannot specify both path and array of files. You have to specify either path and data for a single file or an array for multiple files."
      );
    }
    const { path: path2, writeOpts, writeFiles } = typeof pathOrFiles === "string" ? {
      path: pathOrFiles,
      writeOpts: opts,
      writeFiles: [
        {
          data: dataOrOpts
        }
      ]
    } : {
      path: void 0,
      writeOpts: dataOrOpts,
      writeFiles: pathOrFiles
    };
    if (writeFiles.length === 0) return [];
    const blobs = await Promise.all(
      writeFiles.map((f) => new Response(f.data).blob())
    );
    const res = await this.envdApi.api.POST("/files", {
      params: {
        query: {
          path: path2,
          username: (writeOpts == null ? void 0 : writeOpts.user) || defaultUsername
        }
      },
      bodySerializer() {
        return blobs.reduce((fd, blob, i) => {
          fd.append("file", blob, writeFiles[i].path);
          return fd;
        }, new FormData());
      },
      body: {},
      headers: {
        "Content-Type": "multipart/form-data",
        "Bun-Content-Type": "temporary-fix"
        // https://github.com/oven-sh/bun/issues/14988
      }
    });
    const err = await handleEnvdApiError(res);
    if (err) {
      throw err;
    }
    const files = res.data;
    if (!files) {
      throw new Error("Expected to receive information about written file");
    }
    return files.length === 1 && path2 ? files[0] : files;
  }
  /**
   * List entries in a directory.
   *
   * @param path path to the directory.
   * @param opts connection options.
   *
   * @returns list of entries in the sandbox filesystem directory.
   */
  async list(path2, opts) {
    var _a3;
    if (typeof (opts == null ? void 0 : opts.depth) === "number" && opts.depth < 1) {
      throw new InvalidArgumentError("depth should be at least one");
    }
    try {
      const res = await this.rpc.listDir(
        {
          path: path2,
          depth: (_a3 = opts == null ? void 0 : opts.depth) != null ? _a3 : 1
        },
        {
          headers: authenticationHeader(opts == null ? void 0 : opts.user),
          signal: this.connectionConfig.getSignal(opts == null ? void 0 : opts.requestTimeoutMs)
        }
      );
      const entries = [];
      for (const e of res.entries) {
        const type = mapFileType(e.type);
        if (type) {
          entries.push({
            name: e.name,
            type,
            path: e.path,
            size: Number(e.size),
            mode: e.mode,
            permissions: e.permissions,
            owner: e.owner,
            group: e.group,
            modifiedTime: mapModifiedTime(e.modifiedTime),
            symlinkTarget: e.symlinkTarget
          });
        }
      }
      return entries;
    } catch (err) {
      throw handleRpcError(err);
    }
  }
  /**
   * Create a new directory and all directories along the way if needed on the specified path.
   *
   * @param path path to a new directory. For example '/dirA/dirB' when creating 'dirB'.
   * @param opts connection options.
   *
   * @returns `true` if the directory was created, `false` if it already exists.
   */
  async makeDir(path2, opts) {
    try {
      await this.rpc.makeDir(
        { path: path2 },
        {
          headers: authenticationHeader(opts == null ? void 0 : opts.user),
          signal: this.connectionConfig.getSignal(opts == null ? void 0 : opts.requestTimeoutMs)
        }
      );
      return true;
    } catch (err) {
      if (err instanceof import_connect3.ConnectError) {
        if (err.code === import_connect3.Code.AlreadyExists) {
          return false;
        }
      }
      throw handleRpcError(err);
    }
  }
  /**
   * Rename a file or directory.
   *
   * @param oldPath path to the file or directory to rename.
   * @param newPath new path for the file or directory.
   * @param opts connection options.
   *
   * @returns information about renamed file or directory.
   */
  async rename(oldPath, newPath, opts) {
    try {
      const res = await this.rpc.move(
        {
          source: oldPath,
          destination: newPath
        },
        {
          headers: authenticationHeader(opts == null ? void 0 : opts.user),
          signal: this.connectionConfig.getSignal(opts == null ? void 0 : opts.requestTimeoutMs)
        }
      );
      const entry = res.entry;
      if (!entry) {
        throw new Error("Expected to receive information about moved object");
      }
      return {
        name: entry.name,
        type: mapFileType(entry.type),
        path: entry.path,
        size: Number(entry.size),
        mode: entry.mode,
        permissions: entry.permissions,
        owner: entry.owner,
        group: entry.group,
        modifiedTime: mapModifiedTime(entry.modifiedTime),
        symlinkTarget: entry.symlinkTarget
      };
    } catch (err) {
      throw handleRpcError(err);
    }
  }
  /**
   * Remove a file or directory.
   *
   * @param path path to a file or directory.
   * @param opts connection options.
   */
  async remove(path2, opts) {
    try {
      await this.rpc.remove(
        { path: path2 },
        {
          headers: authenticationHeader(opts == null ? void 0 : opts.user),
          signal: this.connectionConfig.getSignal(opts == null ? void 0 : opts.requestTimeoutMs)
        }
      );
    } catch (err) {
      throw handleRpcError(err);
    }
  }
  /**
   * Check if a file or a directory exists.
   *
   * @param path path to a file or a directory
   * @param opts connection options.
   *
   * @returns `true` if the file or directory exists, `false` otherwise
   */
  async exists(path2, opts) {
    try {
      await this.rpc.stat(
        { path: path2 },
        {
          headers: authenticationHeader(opts == null ? void 0 : opts.user),
          signal: this.connectionConfig.getSignal(opts == null ? void 0 : opts.requestTimeoutMs)
        }
      );
      return true;
    } catch (err) {
      if (err instanceof import_connect3.ConnectError) {
        if (err.code === import_connect3.Code.NotFound) {
          return false;
        }
      }
      throw handleRpcError(err);
    }
  }
  /**
   * Get information about a file or directory.
   *
   * @param path path to a file or directory.
   * @param opts connection options.
   *
   * @returns information about the file or directory like name, type, and path.
   */
  async getInfo(path2, opts) {
    try {
      const res = await this.rpc.stat(
        { path: path2 },
        { headers: authenticationHeader(opts == null ? void 0 : opts.user) }
      );
      if (!res.entry) {
        throw new Error(
          "Expected to receive information about the file or directory"
        );
      }
      return {
        name: res.entry.name,
        type: mapFileType(res.entry.type),
        path: res.entry.path,
        size: Number(res.entry.size),
        mode: res.entry.mode,
        permissions: res.entry.permissions,
        owner: res.entry.owner,
        group: res.entry.group,
        modifiedTime: mapModifiedTime(res.entry.modifiedTime),
        symlinkTarget: res.entry.symlinkTarget
      };
    } catch (err) {
      throw handleRpcError(err);
    }
  }
  /**
   * Start watching a directory for filesystem events.
   *
   * @param path path to directory to watch.
   * @param onEvent callback to call when an event in the directory occurs.
   * @param opts connection options.
   *
   * @returns `WatchHandle` object for stopping watching directory.
   */
  async watchDir(path2, onEvent, opts) {
    var _a3, _b, _c;
    if ((opts == null ? void 0 : opts.recursive) && this.envdApi.version && (0, import_compare_versions.compareVersions)(this.envdApi.version, ENVD_VERSION_RECURSIVE_WATCH) < 0) {
      throw new TemplateError(
        "You need to update the template to use recursive watching. You can do this by running `e2b template build` in the directory with the template."
      );
    }
    const requestTimeoutMs = (_a3 = opts == null ? void 0 : opts.requestTimeoutMs) != null ? _a3 : this.connectionConfig.requestTimeoutMs;
    const controller = new AbortController();
    const reqTimeout = requestTimeoutMs ? setTimeout(() => {
      controller.abort();
    }, requestTimeoutMs) : void 0;
    const events = this.rpc.watchDir(
      {
        path: path2,
        recursive: (_b = opts == null ? void 0 : opts.recursive) != null ? _b : this.defaultWatchRecursive
      },
      {
        headers: __spreadProps(__spreadValues({}, authenticationHeader(opts == null ? void 0 : opts.user)), {
          [KEEPALIVE_PING_HEADER]: KEEPALIVE_PING_INTERVAL_SEC.toString()
        }),
        signal: controller.signal,
        timeoutMs: (_c = opts == null ? void 0 : opts.timeoutMs) != null ? _c : this.defaultWatchTimeout
      }
    );
    try {
      await handleWatchDirStartEvent(events);
      clearTimeout(reqTimeout);
      return new WatchHandle(
        () => controller.abort(),
        events,
        onEvent,
        opts == null ? void 0 : opts.onExit
      );
    } catch (err) {
      throw handleRpcError(err);
    }
  }
};

// src/sandbox/commands/commandHandle.ts
var CommandExitError = class extends SandboxError {
  constructor(result) {
    super(result.error);
    this.result = result;
    this.name = "CommandExitError";
  }
  /**
   * Command execution exit code.
   * `0` if the command finished successfully.
   */
  get exitCode() {
    return this.result.exitCode;
  }
  /**
   * Error message from command execution.
   */
  get error() {
    return this.result.error;
  }
  /**
   * Command execution stdout output.
   */
  get stdout() {
    return this.result.stdout;
  }
  /**
   * Command execution stderr output.
   */
  get stderr() {
    return this.result.stderr;
  }
};
var CommandHandle = class {
  /**
   * @hidden
   * @internal
   * @access protected
   */
  constructor(pid, handleDisconnect, handleKill, events, onStdout, onStderr, onPty) {
    this.pid = pid;
    this.handleDisconnect = handleDisconnect;
    this.handleKill = handleKill;
    this.events = events;
    this.onStdout = onStdout;
    this.onStderr = onStderr;
    this.onPty = onPty;
    this._stdout = "";
    this._stderr = "";
    this._wait = this.handleEvents();
  }
  /**
   * Command execution exit code.
   * `0` if the command finished successfully.
   *
   * It is `undefined` if the command is still running.
   */
  get exitCode() {
    var _a3;
    return (_a3 = this.result) == null ? void 0 : _a3.exitCode;
  }
  /**
   * Error message from command execution.
   */
  get error() {
    var _a3;
    return (_a3 = this.result) == null ? void 0 : _a3.error;
  }
  /**
   * Command execution stderr output.
   */
  get stderr() {
    return this._stderr;
  }
  /**
   * Command execution stdout output.
   */
  get stdout() {
    return this._stdout;
  }
  /**
   * Wait for the command to finish and return the result.
   * If the command exits with a non-zero exit code, it throws a `CommandExitError`.
   *
   * @returns `CommandResult` result of command execution.
   */
  async wait() {
    await this._wait;
    if (this.iterationError) {
      throw this.iterationError;
    }
    if (!this.result) {
      throw new SandboxError("Process exited without a result");
    }
    if (this.result.exitCode !== 0) {
      throw new CommandExitError(this.result);
    }
    return this.result;
  }
  /**
   * Disconnect from the command.
   *
   * The command is not killed, but SDK stops receiving events from the command.
   * You can reconnect to the command using {@link Commands.connect}.
   */
  async disconnect() {
    this.handleDisconnect();
  }
  /**
   * Kill the command.
   * It uses `SIGKILL` signal to kill the command.
   *
   * @returns `true` if the command was killed successfully, `false` if the command was not found.
   */
  async kill() {
    return await this.handleKill();
  }
  iterateEvents() {
    return __asyncGenerator(this, null, function* () {
      var _a3;
      try {
        for (var iter = __forAwait(this.events), more, temp, error; more = !(temp = yield new __await(iter.next())).done; more = false) {
          const event = temp.value;
          const e = (_a3 = event == null ? void 0 : event.event) == null ? void 0 : _a3.event;
          let out;
          switch (e == null ? void 0 : e.case) {
            case "data":
              switch (e.value.output.case) {
                case "stdout":
                  out = new TextDecoder().decode(e.value.output.value);
                  this._stdout += out;
                  yield [out, null, null];
                  break;
                case "stderr":
                  out = new TextDecoder().decode(e.value.output.value);
                  this._stderr += out;
                  yield [null, out, null];
                  break;
                case "pty":
                  yield [null, null, e.value.output.value];
                  break;
              }
              break;
            case "end":
              this.result = {
                exitCode: e.value.exitCode,
                error: e.value.error,
                stdout: this.stdout,
                stderr: this.stderr
              };
              break;
          }
        }
      } catch (temp) {
        error = [temp];
      } finally {
        try {
          more && (temp = iter.return) && (yield new __await(temp.call(iter)));
        } finally {
          if (error)
            throw error[0];
        }
      }
    });
  }
  async handleEvents() {
    var _a3, _b, _c;
    try {
      try {
        for (var iter = __forAwait(this.iterateEvents()), more, temp, error; more = !(temp = await iter.next()).done; more = false) {
          const [stdout, stderr, pty] = temp.value;
          if (stdout !== null) {
            (_a3 = this.onStdout) == null ? void 0 : _a3.call(this, stdout);
          } else if (stderr !== null) {
            (_b = this.onStderr) == null ? void 0 : _b.call(this, stderr);
          } else if (pty) {
            (_c = this.onPty) == null ? void 0 : _c.call(this, pty);
          }
        }
      } catch (temp) {
        error = [temp];
      } finally {
        try {
          more && (temp = iter.return) && await temp.call(iter);
        } finally {
          if (error)
            throw error[0];
        }
      }
    } catch (e) {
      this.iterationError = handleRpcError(e);
    }
  }
};

// src/sandbox/index.ts
var import_connect_web = require("@connectrpc/connect-web");

// src/sandbox/commands/index.ts
var import_connect5 = require("@connectrpc/connect");

// src/envd/process/process_pb.ts
var import_codegenv22 = require("@bufbuild/protobuf/codegenv2");
var file_process_process = /* @__PURE__ */ (0, import_codegenv22.fileDesc)(
  "ChVwcm9jZXNzL3Byb2Nlc3MucHJvdG8SB3Byb2Nlc3MiSgoDUFRZEh8KBHNpemUYASABKAsyES5wcm9jZXNzLlBUWS5TaXplGiIKBFNpemUSDAoEY29scxgBIAEoDRIMCgRyb3dzGAIgASgNIqEBCg1Qcm9jZXNzQ29uZmlnEgsKA2NtZBgBIAEoCRIMCgRhcmdzGAIgAygJEi4KBGVudnMYAyADKAsyIC5wcm9jZXNzLlByb2Nlc3NDb25maWcuRW52c0VudHJ5EhAKA2N3ZBgEIAEoCUgAiAEBGisKCUVudnNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBQgYKBF9jd2QiDQoLTGlzdFJlcXVlc3QiXAoLUHJvY2Vzc0luZm8SJgoGY29uZmlnGAEgASgLMhYucHJvY2Vzcy5Qcm9jZXNzQ29uZmlnEgsKA3BpZBgCIAEoDRIQCgN0YWcYAyABKAlIAIgBAUIGCgRfdGFnIjcKDExpc3RSZXNwb25zZRInCglwcm9jZXNzZXMYASADKAsyFC5wcm9jZXNzLlByb2Nlc3NJbmZvInkKDFN0YXJ0UmVxdWVzdBInCgdwcm9jZXNzGAEgASgLMhYucHJvY2Vzcy5Qcm9jZXNzQ29uZmlnEh4KA3B0eRgCIAEoCzIMLnByb2Nlc3MuUFRZSACIAQESEAoDdGFnGAMgASgJSAGIAQFCBgoEX3B0eUIGCgRfdGFnImIKDVVwZGF0ZVJlcXVlc3QSKQoHcHJvY2VzcxgBIAEoCzIYLnByb2Nlc3MuUHJvY2Vzc1NlbGVjdG9yEh4KA3B0eRgCIAEoCzIMLnByb2Nlc3MuUFRZSACIAQFCBgoEX3B0eSIQCg5VcGRhdGVSZXNwb25zZSKvAwoMUHJvY2Vzc0V2ZW50EjEKBXN0YXJ0GAEgASgLMiAucHJvY2Vzcy5Qcm9jZXNzRXZlbnQuU3RhcnRFdmVudEgAEi8KBGRhdGEYAiABKAsyHy5wcm9jZXNzLlByb2Nlc3NFdmVudC5EYXRhRXZlbnRIABItCgNlbmQYAyABKAsyHi5wcm9jZXNzLlByb2Nlc3NFdmVudC5FbmRFdmVudEgAEjQKCWtlZXBhbGl2ZRgEIAEoCzIfLnByb2Nlc3MuUHJvY2Vzc0V2ZW50LktlZXBBbGl2ZUgAGhkKClN0YXJ0RXZlbnQSCwoDcGlkGAEgASgNGkgKCURhdGFFdmVudBIQCgZzdGRvdXQYASABKAxIABIQCgZzdGRlcnIYAiABKAxIABINCgNwdHkYAyABKAxIAEIICgZvdXRwdXQaWwoIRW5kRXZlbnQSEQoJZXhpdF9jb2RlGAEgASgREg4KBmV4aXRlZBgCIAEoCBIOCgZzdGF0dXMYAyABKAkSEgoFZXJyb3IYBCABKAlIAIgBAUIICgZfZXJyb3IaCwoJS2VlcEFsaXZlQgcKBWV2ZW50IjUKDVN0YXJ0UmVzcG9uc2USJAoFZXZlbnQYASABKAsyFS5wcm9jZXNzLlByb2Nlc3NFdmVudCI3Cg9Db25uZWN0UmVzcG9uc2USJAoFZXZlbnQYASABKAsyFS5wcm9jZXNzLlByb2Nlc3NFdmVudCJjChBTZW5kSW5wdXRSZXF1ZXN0EikKB3Byb2Nlc3MYASABKAsyGC5wcm9jZXNzLlByb2Nlc3NTZWxlY3RvchIkCgVpbnB1dBgCIAEoCzIVLnByb2Nlc3MuUHJvY2Vzc0lucHV0IhMKEVNlbmRJbnB1dFJlc3BvbnNlIjcKDFByb2Nlc3NJbnB1dBIPCgVzdGRpbhgBIAEoDEgAEg0KA3B0eRgCIAEoDEgAQgcKBWlucHV0IsICChJTdHJlYW1JbnB1dFJlcXVlc3QSNwoFc3RhcnQYASABKAsyJi5wcm9jZXNzLlN0cmVhbUlucHV0UmVxdWVzdC5TdGFydEV2ZW50SAASNQoEZGF0YRgCIAEoCzIlLnByb2Nlc3MuU3RyZWFtSW5wdXRSZXF1ZXN0LkRhdGFFdmVudEgAEjoKCWtlZXBhbGl2ZRgDIAEoCzIlLnByb2Nlc3MuU3RyZWFtSW5wdXRSZXF1ZXN0LktlZXBBbGl2ZUgAGjcKClN0YXJ0RXZlbnQSKQoHcHJvY2VzcxgBIAEoCzIYLnByb2Nlc3MuUHJvY2Vzc1NlbGVjdG9yGjEKCURhdGFFdmVudBIkCgVpbnB1dBgCIAEoCzIVLnByb2Nlc3MuUHJvY2Vzc0lucHV0GgsKCUtlZXBBbGl2ZUIHCgVldmVudCIVChNTdHJlYW1JbnB1dFJlc3BvbnNlIl8KEVNlbmRTaWduYWxSZXF1ZXN0EikKB3Byb2Nlc3MYASABKAsyGC5wcm9jZXNzLlByb2Nlc3NTZWxlY3RvchIfCgZzaWduYWwYAiABKA4yDy5wcm9jZXNzLlNpZ25hbCIUChJTZW5kU2lnbmFsUmVzcG9uc2UiOwoOQ29ubmVjdFJlcXVlc3QSKQoHcHJvY2VzcxgBIAEoCzIYLnByb2Nlc3MuUHJvY2Vzc1NlbGVjdG9yIjsKD1Byb2Nlc3NTZWxlY3RvchINCgNwaWQYASABKA1IABINCgN0YWcYAiABKAlIAEIKCghzZWxlY3RvcipICgZTaWduYWwSFgoSU0lHTkFMX1VOU1BFQ0lGSUVEEAASEgoOU0lHTkFMX1NJR1RFUk0QDxISCg5TSUdOQUxfU0lHS0lMTBAJMsoDCgdQcm9jZXNzEjMKBExpc3QSFC5wcm9jZXNzLkxpc3RSZXF1ZXN0GhUucHJvY2Vzcy5MaXN0UmVzcG9uc2USPgoHQ29ubmVjdBIXLnByb2Nlc3MuQ29ubmVjdFJlcXVlc3QaGC5wcm9jZXNzLkNvbm5lY3RSZXNwb25zZTABEjgKBVN0YXJ0EhUucHJvY2Vzcy5TdGFydFJlcXVlc3QaFi5wcm9jZXNzLlN0YXJ0UmVzcG9uc2UwARI5CgZVcGRhdGUSFi5wcm9jZXNzLlVwZGF0ZVJlcXVlc3QaFy5wcm9jZXNzLlVwZGF0ZVJlc3BvbnNlEkoKC1N0cmVhbUlucHV0EhsucHJvY2Vzcy5TdHJlYW1JbnB1dFJlcXVlc3QaHC5wcm9jZXNzLlN0cmVhbUlucHV0UmVzcG9uc2UoARJCCglTZW5kSW5wdXQSGS5wcm9jZXNzLlNlbmRJbnB1dFJlcXVlc3QaGi5wcm9jZXNzLlNlbmRJbnB1dFJlc3BvbnNlEkUKClNlbmRTaWduYWwSGi5wcm9jZXNzLlNlbmRTaWduYWxSZXF1ZXN0GhsucHJvY2Vzcy5TZW5kU2lnbmFsUmVzcG9uc2VCVwoLY29tLnByb2Nlc3NCDFByb2Nlc3NQcm90b1ABogIDUFhYqgIHUHJvY2Vzc8oCB1Byb2Nlc3PiAhNQcm9jZXNzXEdQQk1ldGFkYXRh6gIHUHJvY2Vzc2IGcHJvdG8z"
);
var Process = /* @__PURE__ */ (0, import_codegenv22.serviceDesc)(file_process_process, 0);

// src/sandbox/commands/pty.ts
var import_connect4 = require("@connectrpc/connect");
var Pty = class {
  constructor(transport, connectionConfig) {
    this.transport = transport;
    this.connectionConfig = connectionConfig;
    this.rpc = (0, import_connect4.createClient)(Process, this.transport);
  }
  /**
   * Create a new PTY (pseudo-terminal).
   *
   * @param opts options for creating the PTY.
   *
   * @returns handle to interact with the PTY.
   */
  async create(opts) {
    var _a3, _b, _c;
    const requestTimeoutMs = (_a3 = opts == null ? void 0 : opts.requestTimeoutMs) != null ? _a3 : this.connectionConfig.requestTimeoutMs;
    const envs = (_b = opts == null ? void 0 : opts.envs) != null ? _b : {};
    envs.TERM = "xterm-256color";
    const controller = new AbortController();
    const reqTimeout = setTimeout(() => {
      controller.abort();
    }, requestTimeoutMs);
    const events = this.rpc.start(
      {
        process: {
          cmd: "/bin/bash",
          args: ["-i", "-l"],
          envs,
          cwd: opts == null ? void 0 : opts.cwd
        },
        pty: {
          size: {
            cols: opts.cols,
            rows: opts.rows
          }
        }
      },
      {
        headers: __spreadProps(__spreadValues({}, authenticationHeader(opts == null ? void 0 : opts.user)), {
          [KEEPALIVE_PING_HEADER]: KEEPALIVE_PING_INTERVAL_SEC.toString()
        }),
        signal: controller.signal,
        timeoutMs: (_c = opts == null ? void 0 : opts.timeoutMs) != null ? _c : 6e4
      }
    );
    try {
      const pid = await handleProcessStartEvent(events);
      clearTimeout(reqTimeout);
      return new CommandHandle(
        pid,
        () => controller.abort(),
        () => this.kill(pid),
        events,
        void 0,
        void 0,
        opts.onData
      );
    } catch (err) {
      throw handleRpcError(err);
    }
  }
  /**
   * Send input to a PTY.
   *
   * @param pid process ID of the PTY.
   * @param data input data to send to the PTY.
   * @param opts connection options.
   */
  async sendInput(pid, data, opts) {
    try {
      await this.rpc.sendInput(
        {
          input: {
            input: {
              case: "pty",
              value: data
            }
          },
          process: {
            selector: {
              case: "pid",
              value: pid
            }
          }
        },
        {
          signal: this.connectionConfig.getSignal(opts == null ? void 0 : opts.requestTimeoutMs)
        }
      );
    } catch (err) {
      throw handleRpcError(err);
    }
  }
  /**
   * Resize PTY.
   * Call this when the terminal window is resized and the number of columns and rows has changed.
   *
   * @param pid process ID of the PTY.
   * @param size new size of the PTY.
   * @param opts connection options.
   */
  async resize(pid, size, opts) {
    try {
      await this.rpc.update(
        {
          process: {
            selector: {
              case: "pid",
              value: pid
            }
          },
          pty: {
            size
          }
        },
        {
          signal: this.connectionConfig.getSignal(opts == null ? void 0 : opts.requestTimeoutMs)
        }
      );
    } catch (err) {
      throw handleRpcError(err);
    }
  }
  /**
   * Kill a running PTY specified by process ID.
   * It uses `SIGKILL` signal to kill the PTY.
   *
   * @param pid process ID of the PTY.
   * @param opts connection options.
   *
   * @returns `true` if the PTY was killed, `false` if the PTY was not found.
   */
  async kill(pid, opts) {
    try {
      await this.rpc.sendSignal(
        {
          process: {
            selector: {
              case: "pid",
              value: pid
            }
          },
          signal: 9 /* SIGKILL */
        },
        {
          signal: this.connectionConfig.getSignal(opts == null ? void 0 : opts.requestTimeoutMs)
        }
      );
      return true;
    } catch (err) {
      if (err instanceof import_connect4.ConnectError) {
        if (err.code === import_connect4.Code.NotFound) {
          return false;
        }
      }
      throw handleRpcError(err);
    }
  }
};

// src/sandbox/commands/index.ts
var Commands = class {
  // 60 seconds
  constructor(transport, connectionConfig) {
    this.connectionConfig = connectionConfig;
    this.defaultProcessConnectionTimeout = 6e4;
    this.rpc = (0, import_connect5.createClient)(Process, transport);
  }
  /**
   * List all running commands and PTY sessions.
   *
   * @param opts connection options.
   *
   * @returns list of running commands and PTY sessions.
   */
  async list(opts) {
    try {
      const res = await this.rpc.list(
        {},
        {
          signal: this.connectionConfig.getSignal(opts == null ? void 0 : opts.requestTimeoutMs)
        }
      );
      return res.processes.map((p) => __spreadValues(__spreadProps(__spreadValues({
        pid: p.pid
      }, p.tag && { tag: p.tag }), {
        args: p.config.args,
        envs: p.config.envs,
        cmd: p.config.cmd
      }), p.config.cwd && { cwd: p.config.cwd }));
    } catch (err) {
      throw handleRpcError(err);
    }
  }
  /**
   * Send data to command stdin.
   *
   * @param pid process ID of the command. You can get the list of running commands using {@link Commands.list}.
   * @param data data to send to the command.
   * @param opts connection options.
   */
  async sendStdin(pid, data, opts) {
    try {
      await this.rpc.sendInput(
        {
          process: {
            selector: {
              case: "pid",
              value: pid
            }
          },
          input: {
            input: {
              case: "stdin",
              value: new TextEncoder().encode(data)
            }
          }
        },
        {
          signal: this.connectionConfig.getSignal(opts == null ? void 0 : opts.requestTimeoutMs)
        }
      );
    } catch (err) {
      throw handleRpcError(err);
    }
  }
  /**
   * Kill a running command specified by its process ID.
   * It uses `SIGKILL` signal to kill the command.
   *
   * @param pid process ID of the command. You can get the list of running commands using {@link Commands.list}.
   * @param opts connection options.
   *
   * @returns `true` if the command was killed, `false` if the command was not found.
   */
  async kill(pid, opts) {
    try {
      await this.rpc.sendSignal(
        {
          process: {
            selector: {
              case: "pid",
              value: pid
            }
          },
          signal: 9 /* SIGKILL */
        },
        {
          signal: this.connectionConfig.getSignal(opts == null ? void 0 : opts.requestTimeoutMs)
        }
      );
      return true;
    } catch (err) {
      if (err instanceof import_connect5.ConnectError) {
        if (err.code === import_connect5.Code.NotFound) {
          return false;
        }
      }
      throw handleRpcError(err);
    }
  }
  /**
   * Connect to a running command.
   * You can use {@link CommandHandle.wait} to wait for the command to finish and get execution results.
   *
   * @param pid process ID of the command to connect to. You can get the list of running commands using {@link Commands.list}.
   * @param opts connection options.
   *
   * @returns `CommandHandle` handle to interact with the running command.
   */
  async connect(pid, opts) {
    var _a3, _b;
    const requestTimeoutMs = (_a3 = opts == null ? void 0 : opts.requestTimeoutMs) != null ? _a3 : this.connectionConfig.requestTimeoutMs;
    const controller = new AbortController();
    const reqTimeout = requestTimeoutMs ? setTimeout(() => {
      controller.abort();
    }, requestTimeoutMs) : void 0;
    const events = this.rpc.connect(
      {
        process: {
          selector: {
            case: "pid",
            value: pid
          }
        }
      },
      {
        signal: controller.signal,
        headers: {
          [KEEPALIVE_PING_HEADER]: KEEPALIVE_PING_INTERVAL_SEC.toString()
        },
        timeoutMs: (_b = opts == null ? void 0 : opts.timeoutMs) != null ? _b : this.defaultProcessConnectionTimeout
      }
    );
    try {
      const pid2 = await handleProcessStartEvent(events);
      clearTimeout(reqTimeout);
      return new CommandHandle(
        pid2,
        () => controller.abort(),
        () => this.kill(pid2),
        events,
        opts == null ? void 0 : opts.onStdout,
        opts == null ? void 0 : opts.onStderr,
        void 0
      );
    } catch (err) {
      throw handleRpcError(err);
    }
  }
  async run(cmd, opts) {
    const proc = await this.start(cmd, opts);
    return (opts == null ? void 0 : opts.background) ? proc : proc.wait();
  }
  async start(cmd, opts) {
    var _a3, _b;
    const requestTimeoutMs = (_a3 = opts == null ? void 0 : opts.requestTimeoutMs) != null ? _a3 : this.connectionConfig.requestTimeoutMs;
    const controller = new AbortController();
    const reqTimeout = requestTimeoutMs ? setTimeout(() => {
      controller.abort();
    }, requestTimeoutMs) : void 0;
    const events = this.rpc.start(
      {
        process: {
          cmd: "/bin/bash",
          cwd: opts == null ? void 0 : opts.cwd,
          envs: opts == null ? void 0 : opts.envs,
          args: ["-l", "-c", cmd]
        }
      },
      {
        headers: __spreadProps(__spreadValues({}, authenticationHeader(opts == null ? void 0 : opts.user)), {
          [KEEPALIVE_PING_HEADER]: KEEPALIVE_PING_INTERVAL_SEC.toString()
        }),
        signal: controller.signal,
        timeoutMs: (_b = opts == null ? void 0 : opts.timeoutMs) != null ? _b : this.defaultProcessConnectionTimeout
      }
    );
    try {
      const pid = await handleProcessStartEvent(events);
      clearTimeout(reqTimeout);
      return new CommandHandle(
        pid,
        () => controller.abort(),
        () => this.kill(pid),
        events,
        opts == null ? void 0 : opts.onStdout,
        opts == null ? void 0 : opts.onStderr,
        void 0
      );
    } catch (err) {
      throw handleRpcError(err);
    }
  }
};

// src/sandbox/sandboxApi.ts
var import_compare_versions2 = require("compare-versions");
var SandboxApi = class {
  constructor() {
  }
  /**
   * Kill the sandbox specified by sandbox ID.
   *
   * @param sandboxId sandbox ID.
   * @param opts connection options.
   *
   * @returns `true` if the sandbox was found and killed, `false` otherwise.
   */
  static async kill(sandboxId, opts) {
    var _a3;
    const config = new ConnectionConfig(opts);
    const client = new ApiClient(config);
    const res = await client.api.DELETE("/sandboxes/{sandboxID}", {
      params: {
        path: {
          sandboxID: sandboxId
        }
      },
      signal: config.getSignal(opts == null ? void 0 : opts.requestTimeoutMs)
    });
    if (((_a3 = res.error) == null ? void 0 : _a3.code) === 404) {
      return false;
    }
    const err = handleApiError(res);
    if (err) {
      throw err;
    }
    return true;
  }
  /**
   * Get sandbox information like sandbox ID, template, metadata, started at/end at date.
   *
   * @param sandboxId sandbox ID.
   * @param opts connection options.
   *
   * @returns sandbox information.
   */
  static async getInfo(sandboxId, opts) {
    const fullInfo = await this.getFullInfo(sandboxId, opts);
    delete fullInfo.envdAccessToken;
    delete fullInfo.sandboxDomain;
    return fullInfo;
  }
  /**
   * Get the metrics of the sandbox.
   *
   * @param sandboxId sandbox ID.
   * @param opts sandbox metrics options.
   *
   * @returns  List of sandbox metrics containing CPU, memory and disk usage information.
   */
  static async getMetrics(sandboxId, opts) {
    var _a3, _b;
    const config = new ConnectionConfig(opts);
    const client = new ApiClient(config);
    const res = await client.api.GET("/sandboxes/{sandboxID}/metrics", {
      params: {
        path: {
          sandboxID: sandboxId,
          start: opts == null ? void 0 : opts.start,
          end: opts == null ? void 0 : opts.end
        }
      },
      signal: config.getSignal(opts == null ? void 0 : opts.requestTimeoutMs)
    });
    const err = handleApiError(res);
    if (err) {
      throw err;
    }
    return (_b = (_a3 = res.data) == null ? void 0 : _a3.map((metric) => ({
      timestamp: new Date(metric.timestamp),
      cpuUsedPct: metric.cpuUsedPct,
      cpuCount: metric.cpuCount,
      memUsed: metric.memUsed,
      memTotal: metric.memTotal,
      diskUsed: metric.diskUsed,
      diskTotal: metric.diskTotal
    }))) != null ? _b : [];
  }
  /**
   * Set the timeout of the specified sandbox.
   * After the timeout expires the sandbox will be automatically killed.
   *
   * This method can extend or reduce the sandbox timeout set when creating the sandbox or from the last call to {@link Sandbox.setTimeout}.
   *
   * Maximum time a sandbox can be kept alive is 24 hours (86_400_000 milliseconds) for Pro users and 1 hour (3_600_000 milliseconds) for Hobby users.
   *
   * @param sandboxId sandbox ID.
   * @param timeoutMs timeout in **milliseconds**.
   * @param opts connection options.
   */
  static async setTimeout(sandboxId, timeoutMs, opts) {
    const config = new ConnectionConfig(opts);
    const client = new ApiClient(config);
    const res = await client.api.POST("/sandboxes/{sandboxID}/timeout", {
      params: {
        path: {
          sandboxID: sandboxId
        }
      },
      body: {
        timeout: timeoutToSeconds(timeoutMs)
      },
      signal: config.getSignal(opts == null ? void 0 : opts.requestTimeoutMs)
    });
    const err = handleApiError(res);
    if (err) {
      throw err;
    }
  }
  static async getFullInfo(sandboxId, opts) {
    var _a3;
    const config = new ConnectionConfig(opts);
    const client = new ApiClient(config);
    const res = await client.api.GET("/sandboxes/{sandboxID}", {
      params: {
        path: {
          sandboxID: sandboxId
        }
      },
      signal: config.getSignal(opts == null ? void 0 : opts.requestTimeoutMs)
    });
    const err = handleApiError(res);
    if (err) {
      throw err;
    }
    if (!res.data) {
      throw new Error("Sandbox not found");
    }
    return __spreadProps(__spreadValues({
      sandboxId: res.data.sandboxID,
      templateId: res.data.templateID
    }, res.data.alias && { name: res.data.alias }), {
      metadata: (_a3 = res.data.metadata) != null ? _a3 : {},
      envdVersion: res.data.envdVersion,
      envdAccessToken: res.data.envdAccessToken,
      startedAt: new Date(res.data.startedAt),
      endAt: new Date(res.data.endAt),
      state: res.data.state,
      cpuCount: res.data.cpuCount,
      memoryMB: res.data.memoryMB,
      sandboxDomain: res.data.domain || void 0
    });
  }
  /**
   * Pause the sandbox specified by sandbox ID.
   *
   * @param sandboxId sandbox ID.
   * @param opts connection options.
   *
   * @returns `true` if the sandbox got paused, `false` if the sandbox was already paused.
   */
  static async betaPause(sandboxId, opts) {
    var _a3, _b;
    const config = new ConnectionConfig(opts);
    const client = new ApiClient(config);
    const res = await client.api.POST("/sandboxes/{sandboxID}/pause", {
      params: {
        path: {
          sandboxID: sandboxId
        }
      },
      signal: config.getSignal(opts == null ? void 0 : opts.requestTimeoutMs)
    });
    if (((_a3 = res.error) == null ? void 0 : _a3.code) === 404) {
      throw new NotFoundError(`Sandbox ${sandboxId} not found`);
    }
    if (((_b = res.error) == null ? void 0 : _b.code) === 409) {
      return false;
    }
    const err = handleApiError(res);
    if (err) {
      throw err;
    }
    return true;
  }
  static async createSandbox(template, timeoutMs, opts) {
    var _a3, _b, _c;
    const config = new ConnectionConfig(opts);
    const client = new ApiClient(config);
    const res = await client.api.POST("/sandboxes", {
      body: {
        autoPause: (_a3 = opts == null ? void 0 : opts.autoPause) != null ? _a3 : false,
        templateID: template,
        metadata: opts == null ? void 0 : opts.metadata,
        envVars: opts == null ? void 0 : opts.envs,
        timeout: timeoutToSeconds(timeoutMs),
        secure: (_b = opts == null ? void 0 : opts.secure) != null ? _b : true,
        allow_internet_access: (_c = opts == null ? void 0 : opts.allowInternetAccess) != null ? _c : true
      },
      signal: config.getSignal(opts == null ? void 0 : opts.requestTimeoutMs)
    });
    const err = handleApiError(res);
    if (err) {
      throw err;
    }
    if ((0, import_compare_versions2.compareVersions)(res.data.envdVersion, "0.1.0") < 0) {
      await this.kill(res.data.sandboxID, opts);
      throw new TemplateError(
        "You need to update the template to use the new SDK. You can do this by running `e2b template build` in the directory with the template."
      );
    }
    return {
      sandboxId: res.data.sandboxID,
      sandboxDomain: res.data.domain || void 0,
      envdVersion: res.data.envdVersion,
      envdAccessToken: res.data.envdAccessToken
    };
  }
  static async resumeSandbox(sandboxId, opts) {
    var _a3, _b, _c;
    const timeoutMs = (_a3 = opts == null ? void 0 : opts.timeoutMs) != null ? _a3 : DEFAULT_SANDBOX_TIMEOUT_MS;
    const config = new ConnectionConfig(opts);
    const client = new ApiClient(config);
    const res = await client.api.POST("/sandboxes/{sandboxID}/resume", {
      params: {
        path: {
          sandboxID: sandboxId
        }
      },
      body: {
        timeout: timeoutToSeconds(timeoutMs)
      },
      signal: config.getSignal(opts == null ? void 0 : opts.requestTimeoutMs)
    });
    if (((_b = res.error) == null ? void 0 : _b.code) === 404) {
      throw new NotFoundError(`Paused sandbox ${sandboxId} not found`);
    }
    if (((_c = res.error) == null ? void 0 : _c.code) === 409) {
      return false;
    }
    const err = handleApiError(res);
    if (err) {
      throw err;
    }
    return true;
  }
};
var SandboxPaginator = class {
  constructor(opts) {
    this.config = new ConnectionConfig(opts);
    this.client = new ApiClient(this.config);
    this._hasNext = true;
    this._nextToken = opts == null ? void 0 : opts.nextToken;
    this.query = opts == null ? void 0 : opts.query;
    this.limit = opts == null ? void 0 : opts.limit;
  }
  /**
   * Returns True if there are more items to fetch.
   */
  get hasNext() {
    return this._hasNext;
  }
  /**
   * Returns the next token to use for pagination.
   */
  get nextToken() {
    return this._nextToken;
  }
  /**
   * Get the next page of sandboxes.
   *
   * @throws Error if there are no more items to fetch. Call this method only if `hasNext` is `true`.
   *
   * @returns List of sandboxes
   */
  async nextItems() {
    var _a3, _b, _c;
    if (!this.hasNext) {
      throw new Error("No more items to fetch");
    }
    let metadata = void 0;
    if ((_a3 = this.query) == null ? void 0 : _a3.metadata) {
      const encodedPairs = Object.fromEntries(
        Object.entries(this.query.metadata).map(([key, value]) => [
          encodeURIComponent(key),
          encodeURIComponent(value)
        ])
      );
      metadata = new URLSearchParams(encodedPairs).toString();
    }
    const res = await this.client.api.GET("/v2/sandboxes", {
      params: {
        query: {
          metadata,
          state: (_b = this.query) == null ? void 0 : _b.state,
          limit: this.limit,
          nextToken: this.nextToken
        }
      },
      // requestTimeoutMs is already passed here via the connectionConfig.
      signal: this.config.getSignal()
    });
    const err = handleApiError(res);
    if (err) {
      throw err;
    }
    this._nextToken = res.response.headers.get("x-next-token") || void 0;
    this._hasNext = !!this._nextToken;
    return ((_c = res.data) != null ? _c : []).map(
      (sandbox) => {
        var _a4;
        return __spreadProps(__spreadValues({
          sandboxId: sandbox.sandboxID,
          templateId: sandbox.templateID
        }, sandbox.alias && { name: sandbox.alias }), {
          metadata: (_a4 = sandbox.metadata) != null ? _a4 : {},
          startedAt: new Date(sandbox.startedAt),
          endAt: new Date(sandbox.endAt),
          state: sandbox.state,
          cpuCount: sandbox.cpuCount,
          memoryMB: sandbox.memoryMB,
          envdVersion: sandbox.envdVersion
        });
      }
    );
  }
};

// src/sandbox/index.ts
var import_compare_versions3 = require("compare-versions");
var Sandbox = class extends SandboxApi {
  /**
   * Use {@link Sandbox.create} to create a new Sandbox instead.
   *
   * @hidden
   * @hide
   * @internal
   * @access protected
   */
  constructor(opts) {
    var _a3;
    super();
    this.envdPort = 49983;
    this.connectionConfig = new ConnectionConfig(opts);
    this.sandboxId = opts.sandboxId;
    this.sandboxDomain = (_a3 = opts.sandboxDomain) != null ? _a3 : this.connectionConfig.domain;
    this.envdAccessToken = opts.envdAccessToken;
    this.envdApiUrl = `${this.connectionConfig.debug ? "http" : "https"}://${this.getHost(this.envdPort)}`;
    const rpcTransport = (0, import_connect_web.createConnectTransport)({
      baseUrl: this.envdApiUrl,
      useBinaryFormat: false,
      interceptors: (opts == null ? void 0 : opts.logger) ? [createRpcLogger(opts.logger)] : void 0,
      fetch: (url, options) => {
        const headers = new Headers(this.connectionConfig.headers);
        new Headers(options == null ? void 0 : options.headers).forEach(
          (value, key) => headers.append(key, value)
        );
        if (this.envdAccessToken) {
          headers.append("X-Access-Token", this.envdAccessToken);
        }
        options = __spreadProps(__spreadValues({}, options != null ? options : {}), {
          headers,
          redirect: "follow"
        });
        return fetch(url, options);
      }
    });
    this.envdApi = new EnvdApiClient(
      {
        apiUrl: this.envdApiUrl,
        logger: opts == null ? void 0 : opts.logger,
        accessToken: this.envdAccessToken,
        headers: this.envdAccessToken ? { "X-Access-Token": this.envdAccessToken } : {}
      },
      {
        version: opts == null ? void 0 : opts.envdVersion
      }
    );
    this.files = new Filesystem2(
      rpcTransport,
      this.envdApi,
      this.connectionConfig
    );
    this.commands = new Commands(rpcTransport, this.connectionConfig);
    this.pty = new Pty(rpcTransport, this.connectionConfig);
  }
  /**
   * List all sandboxes.
   *
   * @param opts connection options.
   *
   * @returns paginator for listing sandboxes.
   */
  static list(opts) {
    return new SandboxPaginator(opts);
  }
  static async create(templateOrOpts, opts) {
    var _a3;
    const { template, sandboxOpts } = typeof templateOrOpts === "string" ? { template: templateOrOpts, sandboxOpts: opts } : { template: this.defaultTemplate, sandboxOpts: templateOrOpts };
    const config = new ConnectionConfig(sandboxOpts);
    if (config.debug) {
      return new this(__spreadValues({
        sandboxId: "debug_sandbox_id"
      }, config));
    }
    const sandbox = await SandboxApi.createSandbox(
      template,
      (_a3 = sandboxOpts == null ? void 0 : sandboxOpts.timeoutMs) != null ? _a3 : this.defaultSandboxTimeoutMs,
      sandboxOpts
    );
    return new this(__spreadValues(__spreadValues({}, sandbox), config));
  }
  static async betaCreate(templateOrOpts, opts) {
    var _a3;
    const { template, sandboxOpts } = typeof templateOrOpts === "string" ? { template: templateOrOpts, sandboxOpts: opts } : { template: this.defaultTemplate, sandboxOpts: templateOrOpts };
    const config = new ConnectionConfig(sandboxOpts);
    if (config.debug) {
      return new this(__spreadValues({
        sandboxId: "debug_sandbox_id"
      }, config));
    }
    const sandbox = await SandboxApi.createSandbox(
      template,
      (_a3 = sandboxOpts == null ? void 0 : sandboxOpts.timeoutMs) != null ? _a3 : this.defaultSandboxTimeoutMs,
      sandboxOpts
    );
    return new this(__spreadValues(__spreadValues({}, sandbox), config));
  }
  /**
   * Connect to a sandbox. If the sandbox is paused, it will be automatically resumed.
   * Sandbox must be either running or be paused.
   *
   * With sandbox ID you can connect to the same sandbox from different places or environments (serverless functions, etc).
   *
   * @param sandboxId sandbox ID.
   * @param opts connection options.
   *
   * @returns A running sandbox instance
   *
   * @example
   * ```ts
   * const sandbox = await Sandbox.create()
   * const sandboxId = sandbox.sandboxId
   *
   * // Connect to the same sandbox.
   * const sameSandbox = await Sandbox.connect(sandboxId)
   * ```
   */
  static async connect(sandboxId, opts) {
    try {
      await SandboxApi.setTimeout(
        sandboxId,
        (opts == null ? void 0 : opts.timeoutMs) || DEFAULT_SANDBOX_TIMEOUT_MS,
        opts
      );
    } catch (e) {
      if (e instanceof SandboxError) {
        await SandboxApi.resumeSandbox(sandboxId, opts);
      } else {
        throw e;
      }
    }
    const info = await SandboxApi.getFullInfo(sandboxId, opts);
    const config = new ConnectionConfig(opts);
    return new this(__spreadValues({
      sandboxId,
      sandboxDomain: info.sandboxDomain,
      envdAccessToken: info.envdAccessToken,
      envdVersion: info.envdVersion
    }, config));
  }
  /**
   * Connect to a sandbox. If the sandbox is paused, it will be automatically resumed.
   * Sandbox must be either running or be paused.
   *
   * With sandbox ID you can connect to the same sandbox from different places or environments (serverless functions, etc).
   *
   * @param opts connection options.
   *
   * @returns A running sandbox instance
   *
   * @example
   * ```ts
   * const sandbox = await Sandbox.create()
   * await sandbox.betaPause()
   *
   * // Connect to the same sandbox.
   * const sameSandbox = await sandbox.connect()
   * ```
   */
  async connect(opts) {
    try {
      await SandboxApi.setTimeout(
        this.sandboxId,
        (opts == null ? void 0 : opts.timeoutMs) || DEFAULT_SANDBOX_TIMEOUT_MS,
        opts
      );
    } catch (e) {
      await SandboxApi.resumeSandbox(this.sandboxId, opts);
    }
    return this;
  }
  /**
   * Get the host address for the specified sandbox port.
   * You can then use this address to connect to the sandbox port from outside the sandbox via HTTP or WebSocket.
   *
   * @param port number of the port in the sandbox.
   *
   * @returns host address of the sandbox port.
   *
   * @example
   * ```ts
   * const sandbox = await Sandbox.create()
   * // Start an HTTP server
   * await sandbox.commands.exec('python3 -m http.server 3000')
   * // Get the hostname of the HTTP server
   * const serverURL = sandbox.getHost(3000)
   * ```
   */
  getHost(port) {
    if (this.connectionConfig.debug) {
      return `localhost:${port}`;
    }
    return `${port}-${this.sandboxId}.${this.sandboxDomain}`;
  }
  /**
   * Check if the sandbox is running.
   *
   * @returns `true` if the sandbox is running, `false` otherwise.
   *
   * @example
   * ```ts
   * const sandbox = await Sandbox.create()
   * await sandbox.isRunning() // Returns true
   *
   * await sandbox.kill()
   * await sandbox.isRunning() // Returns false
   * ```
   */
  async isRunning(opts) {
    const signal = this.connectionConfig.getSignal(opts == null ? void 0 : opts.requestTimeoutMs);
    const res = await this.envdApi.api.GET("/health", {
      signal
    });
    if (res.response.status == 502) {
      return false;
    }
    const err = await handleEnvdApiError(res);
    if (err) {
      throw err;
    }
    return true;
  }
  /**
   * Set the timeout of the sandbox.
   * After the timeout expires the sandbox will be automatically killed.
   *
   * This method can extend or reduce the sandbox timeout set when creating the sandbox or from the last call to `.setTimeout`.
   * Maximum time a sandbox can be kept alive is 24 hours (86_400_000 milliseconds) for Pro users and 1 hour (3_600_000 milliseconds) for Hobby users.
   *
   * @param timeoutMs timeout in **milliseconds**.
   * @param opts connection options.
   */
  async setTimeout(timeoutMs, opts) {
    if (this.connectionConfig.debug) {
      return;
    }
    await SandboxApi.setTimeout(this.sandboxId, timeoutMs, __spreadValues(__spreadValues({}, this.connectionConfig), opts));
  }
  /**
   * Kill the sandbox.
   *
   * @param opts connection options.
   */
  async kill(opts) {
    if (this.connectionConfig.debug) {
      return;
    }
    await SandboxApi.kill(this.sandboxId, __spreadValues(__spreadValues({}, this.connectionConfig), opts));
  }
  /**
   * @beta This feature is in beta and may change in the future.
   *
   * Pause a sandbox by its ID.
   *
   * @param opts connection options.
   *
   * @returns sandbox ID that can be used to resume the sandbox.
   */
  async betaPause(opts) {
    return await SandboxApi.betaPause(this.sandboxId, opts);
  }
  /**
   * Get the URL to upload a file to the sandbox.
   *
   * You have to send a POST request to this URL with the file as multipart/form-data.
   *
   * @param path path to the file in the sandbox.
   *
   * @param opts download url options.
   *
   * @returns URL for uploading file.
   */
  async uploadUrl(path2, opts) {
    var _a3;
    opts = opts != null ? opts : {};
    const useSignature = !!this.envdAccessToken;
    if (!useSignature && opts.useSignatureExpiration != void 0) {
      throw new Error(
        "Signature expiration can be used only when sandbox is created as secured."
      );
    }
    const username = (_a3 = opts.user) != null ? _a3 : defaultUsername;
    const filePath = path2 != null ? path2 : "";
    const fileUrl = this.fileUrl(filePath, username);
    if (useSignature) {
      const url = new URL(fileUrl);
      const sig = await getSignature({
        path: filePath,
        operation: "write",
        user: username,
        expirationInSeconds: opts.useSignatureExpiration,
        envdAccessToken: this.envdAccessToken
      });
      url.searchParams.set("signature", sig.signature);
      if (sig.expiration) {
        url.searchParams.set("signature_expiration", sig.expiration.toString());
      }
      return url.toString();
    }
    return fileUrl;
  }
  /**
   * Get the URL to download a file from the sandbox.
   *
   * @param path path to the file in the sandbox.
   *
   * @param opts download url options.
   *
   * @returns URL for downloading file.
   */
  async downloadUrl(path2, opts) {
    var _a3;
    opts = opts != null ? opts : {};
    const useSignature = !!this.envdAccessToken;
    if (!useSignature && opts.useSignatureExpiration != void 0) {
      throw new Error(
        "Signature expiration can be used only when sandbox is created as secured."
      );
    }
    const username = (_a3 = opts.user) != null ? _a3 : defaultUsername;
    const fileUrl = this.fileUrl(path2, username);
    if (useSignature) {
      const url = new URL(fileUrl);
      const sig = await getSignature({
        path: path2,
        operation: "read",
        user: username,
        expirationInSeconds: opts.useSignatureExpiration,
        envdAccessToken: this.envdAccessToken
      });
      url.searchParams.set("signature", sig.signature);
      if (sig.expiration) {
        url.searchParams.set("signature_expiration", sig.expiration.toString());
      }
      return url.toString();
    }
    return fileUrl;
  }
  /**
   * Get sandbox information like sandbox ID, template, metadata, started at/end at date.
   *
   * @param opts connection options.
   *
   * @returns information about the sandbox
   */
  async getInfo(opts) {
    return await SandboxApi.getInfo(this.sandboxId, __spreadValues(__spreadValues({}, this.connectionConfig), opts));
  }
  /**
   * Get the metrics of the sandbox.
   *
   * @param opts connection options.
   *
   * @returns  List of sandbox metrics containing CPU, memory and disk usage information.
   */
  async getMetrics(opts) {
    var _a3, _b;
    if (this.envdApi.version) {
      if ((0, import_compare_versions3.compareVersions)(this.envdApi.version, "0.1.5") < 0) {
        throw new SandboxError(
          "You need to update the template to use the new SDK. You can do this by running `e2b template build` in the directory with the template."
        );
      }
      if ((0, import_compare_versions3.compareVersions)(this.envdApi.version, "0.2.4") < 0) {
        (_b = (_a3 = this.connectionConfig.logger) == null ? void 0 : _a3.warn) == null ? void 0 : _b.call(
          _a3,
          "Disk metrics are not supported in this version of the sandbox, please rebuild the template to get disk metrics."
        );
      }
    }
    return await SandboxApi.getMetrics(this.sandboxId, __spreadValues(__spreadValues({}, this.connectionConfig), opts));
  }
  fileUrl(path2, username) {
    const url = new URL("/files", this.envdApiUrl);
    url.searchParams.set("username", username != null ? username : defaultUsername);
    if (path2) {
      url.searchParams.set("path", path2);
    }
    return url.toString();
  }
};
Sandbox.defaultTemplate = "base";
Sandbox.defaultSandboxTimeoutMs = DEFAULT_SANDBOX_TIMEOUT_MS;

// src/template/errors.ts
var BuildError = class extends Error {
  constructor(message, stackTrace) {
    super(message);
    this.name = "BuildError";
    if (stackTrace) {
      this.stack = stackTrace;
    }
  }
};
var FileUploadError = class extends BuildError {
  constructor(message, stackTrace) {
    super(message, stackTrace);
    this.name = "FileUploadError";
  }
};

// src/template/readycmd.ts
var ReadyCmd = class {
  constructor(cmd) {
    this.cmd = cmd;
  }
  getCmd() {
    return this.cmd;
  }
};
function waitForPort(port) {
  const cmd = `ss -tuln | grep :${port}`;
  return new ReadyCmd(cmd);
}
function waitForURL(url, statusCode = 200) {
  const cmd = `curl -s -o /dev/null -w "%{http_code}" ${url} | grep -q "${statusCode}"`;
  return new ReadyCmd(cmd);
}
function waitForProcess(processName) {
  const cmd = `pgrep ${processName} > /dev/null`;
  return new ReadyCmd(cmd);
}
function waitForFile(filename) {
  const cmd = `[ -f ${filename} ]`;
  return new ReadyCmd(cmd);
}
function waitForTimeout(timeout) {
  const seconds = Math.max(1, Math.floor(timeout / 1e3));
  const cmd = `sleep ${seconds}`;
  return new ReadyCmd(cmd);
}

// src/template/types.ts
var LogEntry = class {
  constructor(timestamp, level, message) {
    this.timestamp = timestamp;
    this.level = level;
    this.message = message;
  }
  toString() {
    return `[${this.timestamp.toISOString()}] [${this.level}] ${stripAnsi(
      this.message
    )}`;
  }
};

// src/template/utils.ts
var import_node_crypto = __toESM(require("crypto"));
var import_node_fs = __toESM(require("fs"));
var import_node_path = __toESM(require("path"));

// src/template/consts.ts
var FINALIZE_STEP_NAME = "finalize";
var BASE_STEP_NAME = "base";
var STACK_TRACE_DEPTH = 3;

// src/template/utils.ts
function readDockerignore(contextPath) {
  const dockerignorePath = import_node_path.default.join(contextPath, ".dockerignore");
  if (!import_node_fs.default.existsSync(dockerignorePath)) {
    return [];
  }
  const content = import_node_fs.default.readFileSync(dockerignorePath, "utf-8");
  return content.split("\n").map((line) => line.trim()).filter((line) => line && !line.startsWith("#"));
}
async function calculateFilesHash(src, dest, contextPath, ignorePatterns, stackTrace) {
  const { glob } = await dynamicGlob();
  const srcPath = import_node_path.default.join(contextPath, src);
  const hash = import_node_crypto.default.createHash("sha256");
  const content = `COPY ${src} ${dest}`;
  hash.update(content);
  const files = await glob(srcPath, {
    ignore: ignorePatterns,
    withFileTypes: true
  });
  if (files.length === 0) {
    const error = new Error(`No files found in ${srcPath}`);
    if (stackTrace) {
      error.stack = stackTrace;
    }
    throw error;
  }
  for (const file of files) {
    if (!file.isFile()) {
      continue;
    }
    const content2 = import_node_fs.default.readFileSync(file.fullpath());
    hash.update(new Uint8Array(content2));
  }
  return hash.digest("hex");
}
function getCallerFrame(depth) {
  const stackTrace = new Error().stack;
  if (!stackTrace) {
    return;
  }
  const lines = stackTrace.split("\n").slice(1);
  if (lines.length < depth + 1) {
    return;
  }
  return lines.slice(depth).join("\n");
}
function getCallerDirectory(depth) {
  const caller = getCallerFrame(depth + 1);
  if (!caller) {
    return;
  }
  const lines = caller.split("\n");
  if (lines.length === 0) {
    return;
  }
  const firstLine = lines[0];
  const match = firstLine.match(/at ([^:]+):\d+:\d+/);
  if (match) {
    const filePath = match[1];
    return import_node_path.default.dirname(filePath);
  }
  return;
}
function padOctal(mode) {
  return mode.toString(8).padStart(4, "0");
}
async function tarFileStream(fileName, fileContextPath) {
  const { globSync } = await dynamicGlob();
  const { create } = await dynamicTar();
  const files = globSync(fileName, { cwd: fileContextPath, nodir: false });
  return create(
    {
      gzip: true,
      cwd: fileContextPath
    },
    files
  );
}
async function tarFileStreamUpload(fileName, fileContextPath) {
  const sizeCalculationStream = await tarFileStream(fileName, fileContextPath);
  let contentLength = 0;
  try {
    for (var iter = __forAwait(sizeCalculationStream), more, temp, error; more = !(temp = await iter.next()).done; more = false) {
      const chunk = temp.value;
      contentLength += chunk.length;
    }
  } catch (temp) {
    error = [temp];
  } finally {
    try {
      more && (temp = iter.return) && await temp.call(iter);
    } finally {
      if (error)
        throw error[0];
    }
  }
  return {
    contentLength,
    uploadStream: await tarFileStream(fileName, fileContextPath)
  };
}
function getBuildStepIndex(step, stackTracesLength) {
  if (step === BASE_STEP_NAME) {
    return 0;
  }
  if (step === FINALIZE_STEP_NAME) {
    return stackTracesLength - 1;
  }
  return Number(step);
}
function readGCPServiceAccountJSON(contextPath, pathOrContent) {
  if (typeof pathOrContent === "string") {
    return import_node_fs.default.readFileSync(import_node_path.default.join(contextPath, pathOrContent), "utf-8");
  }
  return JSON.stringify(pathOrContent);
}

// src/template/buildApi.ts
async function requestBuild(client, { alias, cpuCount, memoryMB }) {
  const requestBuildRes = await client.api.POST("/v2/templates", {
    body: {
      alias,
      cpuCount,
      memoryMB
    }
  });
  const error = handleApiError(requestBuildRes, BuildError);
  if (error) {
    throw error;
  }
  if (!requestBuildRes.data) {
    throw new BuildError("Failed to request build");
  }
  return requestBuildRes.data;
}
async function getFileUploadLink(client, { templateID, filesHash }, stackTrace) {
  const fileUploadLinkRes = await client.api.GET(
    "/templates/{templateID}/files/{hash}",
    {
      params: {
        path: {
          templateID,
          hash: filesHash
        }
      }
    }
  );
  const error = handleApiError(fileUploadLinkRes, FileUploadError, stackTrace);
  if (error) {
    throw error;
  }
  if (!fileUploadLinkRes.data) {
    throw new FileUploadError("Failed to get file upload link", stackTrace);
  }
  return fileUploadLinkRes.data;
}
async function uploadFile(options, stackTrace) {
  const { fileName, url, fileContextPath } = options;
  try {
    const { contentLength, uploadStream } = await tarFileStreamUpload(
      fileName,
      fileContextPath
    );
    const res = await fetch(url, {
      method: "PUT",
      // @ts-expect-error
      body: uploadStream,
      headers: {
        "Content-Length": contentLength.toString()
      },
      duplex: "half"
    });
    if (!res.ok) {
      throw new FileUploadError(
        `Failed to upload file: ${res.statusText}`,
        stackTrace
      );
    }
  } catch (error) {
    if (error instanceof FileUploadError) {
      throw error;
    }
    throw new FileUploadError(`Failed to upload file: ${error}`, stackTrace);
  }
}
async function triggerBuild(client, { templateID, buildID, template }) {
  const triggerBuildRes = await client.api.POST(
    "/v2/templates/{templateID}/builds/{buildID}",
    {
      params: {
        path: {
          templateID,
          buildID
        }
      },
      body: template
    }
  );
  const error = handleApiError(triggerBuildRes, BuildError);
  if (error) {
    throw error;
  }
}
async function getBuildStatus(client, { templateID, buildID, logsOffset }) {
  const buildStatusRes = await client.api.GET(
    "/templates/{templateID}/builds/{buildID}/status",
    {
      params: {
        path: {
          templateID,
          buildID
        },
        query: {
          logsOffset
        }
      }
    }
  );
  const error = handleApiError(buildStatusRes, BuildError);
  if (error) {
    throw error;
  }
  if (!buildStatusRes.data) {
    throw new BuildError("Failed to get build status");
  }
  return buildStatusRes.data;
}
async function waitForBuildFinish(client, {
  templateID,
  buildID,
  onBuildLogs,
  logsRefreshFrequency,
  stackTraces
}) {
  var _a3, _b, _c;
  let logsOffset = 0;
  let status = "building";
  while (status === "building" || status === "waiting") {
    const buildStatus = await getBuildStatus(client, {
      templateID,
      buildID,
      logsOffset
    });
    logsOffset += buildStatus.logEntries.length;
    buildStatus.logEntries.forEach(
      (logEntry) => onBuildLogs == null ? void 0 : onBuildLogs(
        new LogEntry(
          new Date(logEntry.timestamp),
          logEntry.level,
          stripAnsi(logEntry.message)
        )
      )
    );
    status = buildStatus.status;
    switch (status) {
      case "ready": {
        return;
      }
      case "waiting": {
        break;
      }
      case "error": {
        let stackError;
        if (((_a3 = buildStatus.reason) == null ? void 0 : _a3.step) !== void 0) {
          const step = getBuildStepIndex(
            buildStatus.reason.step,
            stackTraces.length
          );
          stackError = stackTraces[step];
        }
        throw new BuildError(
          (_c = (_b = buildStatus == null ? void 0 : buildStatus.reason) == null ? void 0 : _b.message) != null ? _c : "Unknown error",
          stackError
        );
      }
    }
    await new Promise((resolve) => setTimeout(resolve, logsRefreshFrequency));
  }
  throw new BuildError("Unknown build error occurred.");
}

// src/template/dockerfileParser.ts
var import_dockerfile_ast = require("dockerfile-ast");
var import_node_fs2 = __toESM(require("fs"));
function parseDockerfile(dockerfileContentOrPath, templateBuilder) {
  let dockerfileContent;
  try {
    if (import_node_fs2.default.existsSync(dockerfileContentOrPath) && import_node_fs2.default.statSync(dockerfileContentOrPath).isFile()) {
      dockerfileContent = import_node_fs2.default.readFileSync(dockerfileContentOrPath, "utf-8");
    } else {
      dockerfileContent = dockerfileContentOrPath;
    }
  } catch (e) {
    dockerfileContent = dockerfileContentOrPath;
  }
  const dockerfile = import_dockerfile_ast.DockerfileParser.parse(dockerfileContent);
  const instructions = dockerfile.getInstructions();
  const fromInstructions = instructions.filter(
    (instruction) => instruction.getKeyword() === "FROM"
  );
  if (fromInstructions.length > 1) {
    throw new Error("Multi-stage Dockerfiles are not supported");
  }
  if (fromInstructions.length === 0) {
    throw new Error("Dockerfile must contain a FROM instruction");
  }
  const fromInstruction = fromInstructions[0];
  const argumentsData = fromInstruction.getArguments();
  let baseImage = "e2bdev/base";
  if (argumentsData && argumentsData.length > 0) {
    baseImage = argumentsData[0].getValue();
  }
  const resultInstructions = [];
  for (const instruction of instructions) {
    const keyword = instruction.getKeyword();
    switch (keyword) {
      case "FROM":
        break;
      case "RUN":
        handleRunInstruction(instruction, templateBuilder);
        break;
      case "COPY":
      case "ADD":
        handleCopyInstruction(instruction, templateBuilder);
        break;
      case "WORKDIR":
        handleWorkdirInstruction(instruction, templateBuilder);
        break;
      case "USER":
        handleUserInstruction(instruction, templateBuilder);
        break;
      case "ENV":
      case "ARG":
        handleEnvInstruction(instruction, templateBuilder);
        break;
      case "EXPOSE":
        break;
      case "VOLUME":
        break;
      case "CMD":
      case "ENTRYPOINT":
        handleCmdEntrypointInstruction(instruction, templateBuilder);
        break;
      default:
        console.warn(`Unsupported instruction: ${keyword}`);
        break;
    }
  }
  return {
    baseImage,
    instructions: resultInstructions
  };
}
function handleRunInstruction(instruction, templateBuilder) {
  const argumentsData = instruction.getArguments();
  if (argumentsData && argumentsData.length > 0) {
    const command = argumentsData.map((arg) => arg.getValue()).join(" ");
    templateBuilder.runCmd(command);
  }
}
function handleCopyInstruction(instruction, templateBuilder) {
  const argumentsData = instruction.getArguments();
  if (argumentsData && argumentsData.length >= 2) {
    const src = argumentsData[0].getValue();
    const dest = argumentsData[argumentsData.length - 1].getValue();
    templateBuilder.copy(src, dest);
  }
}
function handleWorkdirInstruction(instruction, templateBuilder) {
  const argumentsData = instruction.getArguments();
  if (argumentsData && argumentsData.length > 0) {
    const workdir = argumentsData[0].getValue();
    templateBuilder.setWorkdir(workdir);
  }
}
function handleUserInstruction(instruction, templateBuilder) {
  const argumentsData = instruction.getArguments();
  if (argumentsData && argumentsData.length > 0) {
    const user = argumentsData[0].getValue();
    templateBuilder.setUser(user);
  }
}
function handleEnvInstruction(instruction, templateBuilder) {
  const argumentsData = instruction.getArguments();
  const keyword = instruction.getKeyword();
  if (argumentsData && argumentsData.length >= 1) {
    const envVars = {};
    if (argumentsData.length === 2) {
      const firstArg = argumentsData[0].getValue();
      const secondArg = argumentsData[1].getValue();
      if (firstArg.includes("=") && secondArg.includes("=")) {
        for (const arg of argumentsData) {
          const envString = arg.getValue();
          const equalIndex = envString.indexOf("=");
          if (equalIndex > 0) {
            const key = envString.substring(0, equalIndex);
            const value = envString.substring(equalIndex + 1);
            envVars[key] = value;
          }
        }
      } else {
        envVars[firstArg] = secondArg;
      }
    } else if (argumentsData.length === 1) {
      const envString = argumentsData[0].getValue();
      const equalIndex = envString.indexOf("=");
      if (equalIndex > 0) {
        const key = envString.substring(0, equalIndex);
        const value = envString.substring(equalIndex + 1);
        envVars[key] = value;
      } else if (keyword === "ARG" && envString.trim()) {
        const key = envString.trim();
        envVars[key] = "";
      }
    } else {
      for (const arg of argumentsData) {
        const envString = arg.getValue();
        const equalIndex = envString.indexOf("=");
        if (equalIndex > 0) {
          const key = envString.substring(0, equalIndex);
          const value = envString.substring(equalIndex + 1);
          envVars[key] = value;
        } else if (keyword === "ARG") {
          const key = envString;
          envVars[key] = "";
        }
      }
    }
    if (Object.keys(envVars).length > 0) {
      templateBuilder.setEnvs(envVars);
    }
  }
}
function handleCmdEntrypointInstruction(instruction, templateBuilder) {
  const argumentsData = instruction.getArguments();
  if (argumentsData && argumentsData.length > 0) {
    let command = argumentsData.map((arg) => arg.getValue()).join(" ");
    try {
      const parsedCommand = JSON.parse(command);
      if (Array.isArray(parsedCommand)) {
        command = parsedCommand.join(" ");
      }
    } catch (e) {
    }
    templateBuilder.setStartCmd(command, waitForTimeout(2e4));
  }
}

// src/template/index.ts
var _a2;
var TemplateBase = class {
  constructor(options) {
    this.defaultBaseImage = "e2bdev/base";
    this.baseImage = this.defaultBaseImage;
    this.baseTemplate = void 0;
    this.registryConfig = void 0;
    this.startCmd = void 0;
    this.readyCmd = void 0;
    // Force the whole template to be rebuilt
    this.force = false;
    // Force the next layer to be rebuilt
    this.forceNextLayer = false;
    this.instructions = [];
    this.fileContextPath = runtime === "browser" ? "." : (_a2 = getCallerDirectory(STACK_TRACE_DEPTH)) != null ? _a2 : ".";
    this.ignoreFilePaths = [];
    this.logsRefreshFrequency = 200;
    this.stackTraces = [];
    this.stackTracesEnabled = true;
    var _a3, _b;
    this.fileContextPath = (_a3 = options == null ? void 0 : options.fileContextPath) != null ? _a3 : this.fileContextPath;
    this.ignoreFilePaths = (_b = options == null ? void 0 : options.ignoreFilePaths) != null ? _b : this.ignoreFilePaths;
  }
  static toJSON(template, computeHashes = true) {
    return template.toJSON(computeHashes);
  }
  static toDockerfile(template) {
    return template.toDockerfile();
  }
  static build(template, options) {
    return template.build(options);
  }
  // Built-in image mixins
  fromDebianImage(variant = "slim") {
    return this.fromImage(`debian:${variant}`);
  }
  fromUbuntuImage(variant = "lts") {
    return this.fromImage(`ubuntu:${variant}`);
  }
  fromPythonImage(version2 = "3.13") {
    return this.fromImage(`python:${version2}`);
  }
  fromNodeImage(variant = "lts") {
    return this.fromImage(`node:${variant}`);
  }
  fromBaseImage() {
    return this.fromImage(this.defaultBaseImage);
  }
  fromImage(baseImage, options) {
    this.baseImage = baseImage;
    this.baseTemplate = void 0;
    if (options == null ? void 0 : options.registryConfig) {
      this.registryConfig = options.registryConfig;
    }
    if (this.forceNextLayer) {
      this.force = true;
    }
    this.collectStackTrace();
    return this;
  }
  fromTemplate(template) {
    this.baseTemplate = template;
    this.baseImage = void 0;
    if (this.forceNextLayer) {
      this.force = true;
    }
    this.collectStackTrace();
    return this;
  }
  /**
   * Parse a Dockerfile and convert it to Template SDK format
   *
   * @param dockerfileContentOrPath Either the Dockerfile content as a string,
   *                                or a path to a Dockerfile file
   * @returns TemplateBuilder instance for method chaining
   */
  fromDockerfile(dockerfileContentOrPath) {
    const { baseImage } = parseDockerfile(dockerfileContentOrPath, this);
    this.baseImage = baseImage;
    this.baseTemplate = void 0;
    if (this.forceNextLayer) {
      this.force = true;
    }
    this.collectStackTrace();
    return this;
  }
  fromRegistry(image, options) {
    return this.runInNewStackTraceContext(
      () => this.fromImage(image, {
        registryConfig: {
          type: "registry",
          username: options.username,
          password: options.password
        }
      })
    );
  }
  fromAWSRegistry(image, options) {
    return this.runInNewStackTraceContext(
      () => this.fromImage(image, {
        registryConfig: {
          type: "aws",
          awsAccessKeyId: options.accessKeyId,
          awsSecretAccessKey: options.secretAccessKey,
          awsRegion: options.region
        }
      })
    );
  }
  fromGCPRegistry(image, options) {
    return this.runInNewStackTraceContext(
      () => this.fromImage(image, {
        registryConfig: {
          type: "gcp",
          serviceAccountJson: readGCPServiceAccountJSON(
            this.fileContextPath,
            options.serviceAccountJSON
          )
        }
      })
    );
  }
  copy(srcOrItems, destOrOptions, options) {
    var _a3, _b;
    if (runtime === "browser") {
      throw new Error("Browser runtime is not supported for copy");
    }
    const items = Array.isArray(srcOrItems) ? srcOrItems : [
      {
        src: srcOrItems,
        dest: destOrOptions,
        mode: options == null ? void 0 : options.mode,
        user: options == null ? void 0 : options.user,
        forceUpload: options == null ? void 0 : options.forceUpload
      }
    ];
    for (const item of items) {
      const args = [
        item.src,
        item.dest,
        (_a3 = item.user) != null ? _a3 : "",
        item.mode ? padOctal(item.mode) : ""
      ];
      this.instructions.push({
        type: "COPY" /* COPY */,
        args,
        force: (_b = item.forceUpload) != null ? _b : this.forceNextLayer,
        forceUpload: item.forceUpload
      });
    }
    this.collectStackTrace();
    return this;
  }
  remove(path2, options) {
    const args = ["rm", path2];
    if (options == null ? void 0 : options.recursive) {
      args.push("-r");
    }
    if (options == null ? void 0 : options.force) {
      args.push("-f");
    }
    return this.runInNewStackTraceContext(() => this.runCmd(args.join(" ")));
  }
  rename(src, dest, options) {
    const args = ["mv", src, dest];
    if (options == null ? void 0 : options.force) {
      args.push("-f");
    }
    return this.runInNewStackTraceContext(() => this.runCmd(args.join(" ")));
  }
  makeDir(paths2, options) {
    const args = ["mkdir", "-p", ...Array.isArray(paths2) ? paths2 : [paths2]];
    if (options == null ? void 0 : options.mode) {
      args.push(`-m ${padOctal(options.mode)}`);
    }
    return this.runInNewStackTraceContext(() => this.runCmd(args.join(" ")));
  }
  makeSymlink(src, dest) {
    const args = ["ln", "-s", src, dest];
    return this.runInNewStackTraceContext(() => this.runCmd(args.join(" ")));
  }
  runCmd(commandOrCommands, options) {
    const cmds = Array.isArray(commandOrCommands) ? commandOrCommands : [commandOrCommands];
    const args = [cmds.join(" && ")];
    if (options == null ? void 0 : options.user) {
      args.push(options.user);
    }
    this.instructions.push({
      type: "RUN" /* RUN */,
      args,
      force: this.forceNextLayer
    });
    this.collectStackTrace();
    return this;
  }
  setWorkdir(workdir) {
    this.instructions.push({
      type: "WORKDIR" /* WORKDIR */,
      args: [workdir],
      force: this.forceNextLayer
    });
    this.collectStackTrace();
    return this;
  }
  setUser(user) {
    this.instructions.push({
      type: "USER" /* USER */,
      args: [user],
      force: this.forceNextLayer
    });
    this.collectStackTrace();
    return this;
  }
  pipInstall(packages) {
    const args = ["pip", "install"];
    const packageList = packages ? Array.isArray(packages) ? packages : [packages] : void 0;
    if (packageList) {
      args.push(...packageList);
    } else {
      args.push(".");
    }
    return this.runInNewStackTraceContext(() => this.runCmd(args));
  }
  npmInstall(packages, g) {
    const args = ["npm", "install"];
    const packageList = packages ? Array.isArray(packages) ? packages : [packages] : void 0;
    if (packageList) {
      args.push(...packageList);
    }
    if (g) {
      args.push("-g");
    }
    return this.runInNewStackTraceContext(() => this.runCmd(args));
  }
  aptInstall(packages) {
    const packageList = Array.isArray(packages) ? packages : [packages];
    return this.runInNewStackTraceContext(
      () => this.runCmd(
        [
          "apt-get update",
          `DEBIAN_FRONTEND=noninteractive DEBCONF_NOWARNINGS=yes apt-get install -y --no-install-recommends ${packageList.join(
            " "
          )}`
        ],
        { user: "root" }
      )
    );
  }
  gitClone(url, path2, options) {
    const args = ["git", "clone", url, path2];
    if (options == null ? void 0 : options.branch) {
      args.push(`--branch ${options.branch}`);
      args.push("--single-branch");
    }
    if (options == null ? void 0 : options.depth) {
      args.push(`--depth ${options.depth}`);
    }
    return this.runInNewStackTraceContext(() => this.runCmd(args.join(" ")));
  }
  setStartCmd(startCommand, readyCommand) {
    this.startCmd = startCommand;
    if (readyCommand instanceof ReadyCmd) {
      this.readyCmd = readyCommand.getCmd();
    } else {
      this.readyCmd = readyCommand;
    }
    this.collectStackTrace();
    return this;
  }
  setReadyCmd(readyCommand) {
    if (readyCommand instanceof ReadyCmd) {
      this.readyCmd = readyCommand.getCmd();
    } else {
      this.readyCmd = readyCommand;
    }
    this.collectStackTrace();
    return this;
  }
  setEnvs(envs) {
    if (Object.keys(envs).length === 0) {
      return this;
    }
    this.instructions.push({
      type: "ENV" /* ENV */,
      args: Object.entries(envs).flatMap(([key, value]) => [key, value]),
      force: this.forceNextLayer
    });
    this.collectStackTrace();
    return this;
  }
  skipCache() {
    this.forceNextLayer = true;
    return this;
  }
  collectStackTrace(stackTracesDepth = STACK_TRACE_DEPTH) {
    if (!this.stackTracesEnabled) {
      return this;
    }
    this.stackTraces.push(getCallerFrame(stackTracesDepth));
    return this;
  }
  disableStackTrace() {
    this.stackTracesEnabled = false;
    return this;
  }
  enableStackTrace() {
    this.stackTracesEnabled = true;
    return this;
  }
  runInNewStackTraceContext(fn) {
    this.disableStackTrace();
    const result = fn();
    this.enableStackTrace();
    this.collectStackTrace(STACK_TRACE_DEPTH + 1);
    return result;
  }
  async toJSON(computeHashes) {
    let instructions = this.instructions;
    if (computeHashes) {
      instructions = await this.instructionsWithHashes();
    }
    return JSON.stringify(this.serialize(instructions), void 0, 2);
  }
  toDockerfile() {
    if (this.baseTemplate !== void 0) {
      throw new Error(
        "Cannot convert template built from another template to Dockerfile. Templates based on other templates can only be built using the E2B API."
      );
    }
    if (this.baseImage === void 0) {
      throw new Error("No base image specified for template");
    }
    let dockerfile = `FROM ${this.baseImage}
`;
    for (const instruction of this.instructions) {
      dockerfile += `${instruction.type} ${instruction.args.join(" ")}
`;
    }
    if (this.startCmd) {
      dockerfile += `ENTRYPOINT ${this.startCmd}
`;
    }
    return dockerfile;
  }
  async build(options) {
    var _a3, _b, _c, _d, _e, _f, _g;
    const config = new ConnectionConfig({
      domain: options.domain,
      apiKey: options.apiKey
    });
    const client = new ApiClient(config);
    if (options.skipCache) {
      this.force = true;
    }
    (_a3 = options.onBuildLogs) == null ? void 0 : _a3.call(
      options,
      new LogEntry(
        /* @__PURE__ */ new Date(),
        "info",
        `Requesting build for template: ${options.alias}`
      )
    );
    const { templateID, buildID } = await requestBuild(client, {
      alias: options.alias,
      cpuCount: (_b = options.cpuCount) != null ? _b : 2,
      memoryMB: (_c = options.memoryMB) != null ? _c : 1024
    });
    (_d = options.onBuildLogs) == null ? void 0 : _d.call(
      options,
      new LogEntry(
        /* @__PURE__ */ new Date(),
        "info",
        `Template created with ID: ${templateID}, Build ID: ${buildID}`
      )
    );
    const instructionsWithHashes = await this.instructionsWithHashes();
    const uploadPromises = instructionsWithHashes.map(
      async (instruction, index) => {
        var _a4, _b2, _c2;
        if (instruction.type !== "COPY" /* COPY */) {
          return;
        }
        const src = instruction.args.length > 0 ? instruction.args[0] : null;
        const filesHash = (_a4 = instruction.filesHash) != null ? _a4 : null;
        if (src === null || filesHash === null) {
          throw new Error("Source path and files hash are required");
        }
        const forceUpload = instruction.forceUpload;
        let stackTrace = void 0;
        if (index + 1 >= 0 && index + 1 < this.stackTraces.length) {
          stackTrace = this.stackTraces[index + 1];
        }
        const { present, url } = await getFileUploadLink(
          client,
          {
            templateID,
            filesHash
          },
          stackTrace
        );
        if (forceUpload && url != null || present === false && url != null) {
          await uploadFile(
            {
              fileName: src,
              fileContextPath: this.fileContextPath,
              url
            },
            stackTrace
          );
          (_b2 = options.onBuildLogs) == null ? void 0 : _b2.call(
            options,
            new LogEntry(/* @__PURE__ */ new Date(), "info", `Uploaded '${src}'`)
          );
        } else {
          (_c2 = options.onBuildLogs) == null ? void 0 : _c2.call(
            options,
            new LogEntry(
              /* @__PURE__ */ new Date(),
              "info",
              `Skipping upload of '${src}', already cached`
            )
          );
        }
      }
    );
    await Promise.all(uploadPromises);
    (_e = options.onBuildLogs) == null ? void 0 : _e.call(
      options,
      new LogEntry(/* @__PURE__ */ new Date(), "info", "All file uploads completed")
    );
    (_f = options.onBuildLogs) == null ? void 0 : _f.call(
      options,
      new LogEntry(/* @__PURE__ */ new Date(), "info", "Starting building...")
    );
    await triggerBuild(client, {
      templateID,
      buildID,
      template: this.serialize(instructionsWithHashes)
    });
    (_g = options.onBuildLogs) == null ? void 0 : _g.call(
      options,
      new LogEntry(/* @__PURE__ */ new Date(), "info", "Waiting for logs...")
    );
    await waitForBuildFinish(client, {
      templateID,
      buildID,
      onBuildLogs: options.onBuildLogs,
      logsRefreshFrequency: this.logsRefreshFrequency,
      stackTraces: this.stackTraces
    });
  }
  // We might no longer need this as we move the logic server-side
  async instructionsWithHashes() {
    return Promise.all(
      this.instructions.map(async (instruction, index) => {
        if (instruction.type !== "COPY" /* COPY */) {
          return instruction;
        }
        const src = instruction.args.length > 0 ? instruction.args[0] : null;
        const dest = instruction.args.length > 1 ? instruction.args[1] : null;
        if (src === null || dest === null) {
          throw new Error("Source path and destination path are required");
        }
        let stackTrace = void 0;
        if (index + 1 >= 0 && index + 1 < this.stackTraces.length) {
          stackTrace = this.stackTraces[index + 1];
        }
        return __spreadProps(__spreadValues({}, instruction), {
          filesHash: await calculateFilesHash(
            src,
            dest,
            this.fileContextPath,
            [
              ...this.ignoreFilePaths,
              ...runtime === "browser" ? [] : readDockerignore(this.fileContextPath)
            ],
            stackTrace
          )
        });
      })
    );
  }
  serialize(steps) {
    const templateData = {
      startCmd: this.startCmd,
      readyCmd: this.readyCmd,
      steps,
      force: this.force
    };
    if (this.baseImage !== void 0) {
      templateData.fromImage = this.baseImage;
    }
    if (this.baseTemplate !== void 0) {
      templateData.fromTemplate = this.baseTemplate;
    }
    if (this.registryConfig !== void 0) {
      templateData.fromImageRegistry = this.registryConfig;
    }
    return templateData;
  }
};
function Template(options) {
  return new TemplateBase(options);
}
Template.build = TemplateBase.build;
Template.toJSON = TemplateBase.toJSON;
Template.toDockerfile = TemplateBase.toDockerfile;

// src/index.ts
var src_default = Sandbox;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ApiClient,
  AuthenticationError,
  BuildError,
  CommandExitError,
  ConnectionConfig,
  FileType,
  FileUploadError,
  FilesystemEventType,
  InvalidArgumentError,
  NotEnoughSpaceError,
  NotFoundError,
  RateLimitError,
  Sandbox,
  SandboxError,
  Template,
  TemplateError,
  TimeoutError,
  getSignature,
  waitForFile,
  waitForPort,
  waitForProcess,
  waitForTimeout,
  waitForURL
});
//# sourceMappingURL=index.js.map